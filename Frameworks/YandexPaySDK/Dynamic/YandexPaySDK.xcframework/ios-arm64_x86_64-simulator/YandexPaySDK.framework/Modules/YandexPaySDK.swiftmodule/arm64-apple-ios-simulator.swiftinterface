// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name YandexPaySDK
import Foundation
import QuartzCore
import SafariServices
import Swift
import UIKit
import WebKit
import XPlatPaySDK
import XPlatPaySDK/*.Logger*/
import YandexLoginSDK
@_exported import YandexPaySDK
import os.log
import os
public enum YPCountryCode {
  case ru
  case us
  public static func == (a: YandexPaySDK.YPCountryCode, b: YandexPaySDK.YPCountryCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension CardExpirationDateField : Swift.Equatable {
  public static func == (lhs: XPlatPaySDK.CardExpirationDateField, rhs: XPlatPaySDK.CardExpirationDateField) -> Swift.Bool
}
public struct YPOrderItem {
  public let type: YandexPaySDK.YPOrderItemType?
  public let label: Swift.String
  public let amount: YandexPaySDK.YPPrice
  public let quantity: YandexPaySDK.YPOrderItemQuantity?
  public init(type: YandexPaySDK.YPOrderItemType? = nil, label: Swift.String, amount: YandexPaySDK.YPPrice, quantity: YandexPaySDK.YPOrderItemQuantity? = nil)
}
public enum YPOrderItemType {
  case pickup
  case shipping
  case discount
  case promocode
  public static func == (a: YandexPaySDK.YPOrderItemType, b: YandexPaySDK.YPOrderItemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct YandexPaySDKConfiguration {
  public let environment: YandexPaySDK.YandexPaySDKEnvironment
  public init(environment: YandexPaySDK.YandexPaySDKEnvironment)
}
public typealias YPGateway = Swift.String
public typealias YPGatewayMerchantID = Swift.String
public enum YPAdditionalField : Swift.Hashable {
  case comment
  case acceptCoupon
  public static func == (a: YandexPaySDK.YPAdditionalField, b: YandexPaySDK.YPAdditionalField) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct YPOrderItemQuantity {
  public let label: Swift.String?
  public let count: Swift.Int
  public init(label: Swift.String? = nil, count: Swift.Int)
}
public enum YPCurrencyCode {
  case rub
  case usd
  public static func == (a: YandexPaySDK.YPCurrencyCode, b: YandexPaySDK.YPCurrencyCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias YPPaymentToken = Swift.String
public typealias YPPrice = Swift.String
public struct RequiredShippingTypes : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum YPPaymentResult {
  case succeeded(YandexPaySDK.YPPaymentInfo)
  case cancelled
  case failed(YandexPaySDK.YPPaymentError)
}
public struct YPPaymentInfo {
  public let paymentToken: YandexPaySDK.YPPaymentToken
  public let paymentMethodInfo: YandexPaySDK.YPPaymentMethodInfo
  public let paymentAmount: YandexPaySDK.YPPrice
  public init(paymentToken: YandexPaySDK.YPPaymentToken, paymentMethodInfo: YandexPaySDK.YPPaymentMethodInfo, paymentAmount: YandexPaySDK.YPPrice)
}
public typealias YPOrderID = Swift.String
public struct YPOrder {
  public let id: YandexPaySDK.YPOrderID
  public let label: Swift.String?
  public let amount: YandexPaySDK.YPPrice
  public let items: [YandexPaySDK.YPOrderItem]?
  public init(id: YandexPaySDK.YPOrderID, label: Swift.String? = nil, amount: YandexPaySDK.YPPrice, items: [YandexPaySDK.YPOrderItem]? = nil)
}
infix operator <=> : DefaultPrecedence
public enum ValidationError : Foundation.LocalizedError {
  case authenticationProblem
  case unknownMerchantOrigin
  case unknownMerchant
  case unknownGateway
  case insecureMerchantOrigin
  case amountLimitExceeded
  case invalidAmount
  case invalidCountry
  case invalidCurrency
  case amountMismatch
  case unknownValidationProblem
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: YandexPaySDK.ValidationError, b: YandexPaySDK.ValidationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct YandexPayButtonConfiguration {
  public let theme: YandexPaySDK.YandexPayButtonTheme
  public init(theme: YandexPaySDK.YandexPayButtonTheme)
}
public struct YPMerchant {
  public let id: YandexPaySDK.YPMerchantID
  public let name: Swift.String
  public let url: Swift.String
  public init(id: YandexPaySDK.YPMerchantID, name: Swift.String, url: Swift.String)
}
public enum YPPaymentError : Swift.Error {
  case authenticationProblem
  case unknownMerchantOrigin
  case unknownMerchant
  case unknownGateway
  case insecureMerchantOrigin
  case amountLimitExceeded
  case invalidAmount
  case invalidCountry
  case invalidCurrency
  case amountMismatch
  case unknownError
  public static func == (a: YandexPaySDK.YPPaymentError, b: YandexPaySDK.YPPaymentError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum YPRequiredField : Swift.Hashable {
  case billingContactEmail
  case billingContactName
  case shippingContactEmail
  case shippingContactName
  case shippingContactPhone
  case directShippingType
  case pickupShippingType
  public static func == (a: YandexPaySDK.YPRequiredField, b: YandexPaySDK.YPRequiredField) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum YandexPaySDKEnvironment {
  case sandbox
  case production
  public static func == (a: YandexPaySDK.YandexPaySDKEnvironment, b: YandexPaySDK.YandexPaySDKEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension YPCardNetwork : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol YandexPayButtonDelegate : AnyObject {
  func yandexPayButton(_ button: YandexPaySDK.YandexPayButton, didCompletePaymentWithResult result: YandexPaySDK.YPPaymentResult)
  func yandexPayButtonDidRequestViewControllerForPresentation(_ button: YandexPaySDK.YandexPayButton) -> UIKit.UIViewController?
  func yandexPayButtonDidRequestPaymentSheet(_ button: YandexPaySDK.YandexPayButton) -> YandexPaySDK.YPPaymentSheet?
}
public struct YandexPayButtonTheme {
  public let appearance: YandexPaySDK.YandexPayButtonApperance
  @available(iOS 13.0, *)
  public var dynamic: Swift.Bool {
    get
  }
  public init(appearance: YandexPaySDK.YandexPayButtonApperance)
  @available(iOS 13.0, *)
  public init(appearance: YandexPaySDK.YandexPayButtonApperance, dynamic: Swift.Bool)
}
public protocol YandexPayButtonAsyncDelegate : AnyObject {
  func yandexPayButton(_ button: YandexPaySDK.YandexPayButton, didCompletePaymentWithResult result: YandexPaySDK.YPPaymentResult)
  func yandexPayButtonDidRequestViewControllerForPresentation(_ button: YandexPaySDK.YandexPayButton) -> UIKit.UIViewController?
  func yandexPayButtonDidRequestPaymentSheet(_ button: YandexPaySDK.YandexPayButton, completion: @escaping (YandexPaySDK.YPPaymentSheet?) -> Swift.Void)
}
public enum YPAuthMethod {
  case panOnly
  case cloudToken
  public static func == (a: YandexPaySDK.YPAuthMethod, b: YandexPaySDK.YPAuthMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol YandexPayButton : UIKit.UIView {
  var theme: YandexPaySDK.YandexPayButtonTheme { get }
  func setTheme(_ theme: YandexPaySDK.YandexPayButtonTheme, animated: Swift.Bool)
  func setLoaderVisible(_ visible: Swift.Bool, animated: Swift.Bool)
  func reloadPersonalizationData(completion: @escaping (Swift.Error?) -> Swift.Void)
}
public struct YPPaymentSheet {
  public let countryCode: YandexPaySDK.YPCountryCode
  public let currencyCode: YandexPaySDK.YPCurrencyCode
  public let merchant: YandexPaySDK.YPMerchant
  public let order: YandexPaySDK.YPOrder
  public let paymentMethods: [YandexPaySDK.YPPaymentMethod]
  public let additionalFields: Swift.Set<YandexPaySDK.YPAdditionalField>
  public let requiredFields: Swift.Set<YandexPaySDK.YPRequiredField>
  public init(countryCode: YandexPaySDK.YPCountryCode, currencyCode: YandexPaySDK.YPCurrencyCode, merchant: YandexPaySDK.YPMerchant, order: YandexPaySDK.YPOrder, paymentMethods: [YandexPaySDK.YPPaymentMethod], additionalFields: Swift.Set<YandexPaySDK.YPAdditionalField> = [], requiredFields: Swift.Set<YandexPaySDK.YPRequiredField> = [])
}
public enum YandexPayButtonApperance {
  case light
  case dark
  public static func == (a: YandexPaySDK.YandexPayButtonApperance, b: YandexPaySDK.YandexPayButtonApperance) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias YPMerchantID = Swift.String
public enum YPPaymentMethodInfo {
  case card(YandexPaySDK.YPCardPaymentMethodInfo)
}
public enum YPPaymentMethod {
  case card(YandexPaySDK.YPCardPaymentMethod)
}
public struct YPCardPaymentMethod {
  public let gateway: YandexPaySDK.YPGateway
  public let gatewayMerchantId: YandexPaySDK.YPGatewayMerchantID
  public let allowedAuthMethods: [YandexPaySDK.YPAuthMethod]
  public let allowedCardNetworks: [YandexPaySDK.YPCardNetwork]
  public let verificationDetails: Swift.Bool
  public init(gateway: YandexPaySDK.YPGateway, gatewayMerchantId: YandexPaySDK.YPGatewayMerchantID, allowedAuthMethods: [YandexPaySDK.YPAuthMethod], allowedCardNetworks: [YandexPaySDK.YPCardNetwork], verificationDetails: Swift.Bool = false)
}
@_hasMissingDesignatedInitializers final public class YandexPaySDKApi {
  public static var instance: YandexPaySDK.YandexPaySDKApi {
    get
  }
  public static var isInitialized: Swift.Bool {
    get
  }
  public static func initialize(configuration: YandexPaySDK.YandexPaySDKConfiguration) throws
  final public func createButton(configuration: YandexPaySDK.YandexPayButtonConfiguration, delegate: YandexPaySDK.YandexPayButtonDelegate) -> YandexPaySDK.YandexPayButton
  final public func createButton(configuration: YandexPaySDK.YandexPayButtonConfiguration, asyncDelegate: YandexPaySDK.YandexPayButtonAsyncDelegate) -> YandexPaySDK.YandexPayButton
  final public func applicationWillEnterForeground()
  final public func applicationDidBecomeActive()
  @discardableResult
  final public func applicationDidReceiveOpen(_ url: Foundation.URL, sourceApplication: Swift.String?) -> Swift.Bool
  @discardableResult
  final public func applicationDidReceiveUserActivity(_ userActivity: Foundation.NSUserActivity) -> Swift.Bool
  @objc deinit
}
public struct YPCardPaymentMethodInfo {
  public let cardLast4: Swift.String?
  public let cardNetwork: YandexPaySDK.YPCardNetwork?
  public init(cardLast4: Swift.String?, cardNetwork: YandexPaySDK.YPCardNetwork?)
}
public enum YPCardNetwork {
  case americanExpress
  case discover
  case jcb
  case mastercard
  case visa
  case visaElectron
  case maestro
  case mir
  case unionPay
  case uzcard
  public static func == (a: YandexPaySDK.YPCardNetwork, b: YandexPaySDK.YPCardNetwork) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension YandexPaySDK.YPCurrencyCode : Swift.Equatable {}
extension YandexPaySDK.YPCurrencyCode : Swift.Hashable {}
extension YandexPaySDK.YPCountryCode : Swift.Equatable {}
extension YandexPaySDK.YPCountryCode : Swift.Hashable {}
extension XPlatPaySDK.CardValidationError : Swift.Error {}
extension XPlatPaySDK.CardNumberField : Swift.Equatable {}
extension XPlatPaySDK.CardCvnField : Swift.Equatable {}
extension YandexPaySDK.YPOrderItemType : Swift.Equatable {}
extension YandexPaySDK.YPOrderItemType : Swift.Hashable {}
extension YandexPaySDK.YPAuthMethod : Swift.Equatable {}
extension YandexPaySDK.YPAuthMethod : Swift.Hashable {}
extension YandexPaySDK.ValidationError : Swift.Equatable {}
extension YandexPaySDK.ValidationError : Swift.Hashable {}
extension YandexPaySDK.YPPaymentError : Swift.Equatable {}
extension YandexPaySDK.YPPaymentError : Swift.Hashable {}
extension YandexPaySDK.YandexPaySDKEnvironment : Swift.Equatable {}
extension YandexPaySDK.YandexPaySDKEnvironment : Swift.Hashable {}
extension YandexPaySDK.YPCardNetwork : Swift.Equatable {}
extension YandexPaySDK.YPCardNetwork : Swift.Hashable {}
extension YandexPaySDK.YandexPayButtonApperance : Swift.Equatable {}
extension YandexPaySDK.YandexPayButtonApperance : Swift.Hashable {}
