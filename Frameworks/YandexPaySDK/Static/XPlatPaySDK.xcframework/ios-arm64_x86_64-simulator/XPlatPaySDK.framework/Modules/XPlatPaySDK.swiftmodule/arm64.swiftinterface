// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name XPlatPaySDK
import CommonCrypto
import Foundation
import PromiseKit
import Swift
@_exported import XPlatPaySDK
open class ItemInfo {
  final public let path: Swift.String
  final public let isFile: Swift.Bool
  final public let size: Swift.Int64
  final public let mtime: Swift.Int64
  public init(_ path: Swift.String, _ isFile: Swift.Bool, _ size: Swift.Int64, _ mtime: Swift.Int64)
  @objc deinit
}
public enum Encoding {
  case Utf8
  case Base64
  public static func == (a: XPlatPaySDK.Encoding, b: XPlatPaySDK.Encoding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HashType {
  case Md5
  case Sha256
  case Sha512
  public static func == (a: XPlatPaySDK.HashType, b: XPlatPaySDK.HashType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AggregatorProvider {
  @discardableResult
  func getAggregator() -> XPlatPaySDK.Aggregator
  @discardableResult
  func updateAggregator(_ eventName: XPlatPaySDK.EventusEvent) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class EmptyAggregatorProvider : XPlatPaySDK.AggregatorProvider {
  @discardableResult
  open func getAggregator() -> XPlatPaySDK.Aggregator
  @discardableResult
  open func updateAggregator(_ _eventName: XPlatPaySDK.EventusEvent) -> Swift.Bool
  @objc deinit
}
public enum OrderItemTypes {
  case Pickup
  case Shipping
  case Discount
  case Promocode
  public static func == (a: XPlatPaySDK.OrderItemTypes, b: XPlatPaySDK.OrderItemTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@discardableResult
public func orderItemTypeFromString(_ value: Swift.String) -> XPlatPaySDK.OrderItemTypes!
@discardableResult
public func orderItemTypeToString(_ value: XPlatPaySDK.OrderItemTypes) -> Swift.String
open class UriQueryParameter {
  final public let name: Swift.String
  final public let value: Swift.String
  public init(_ name: Swift.String, _ value: Swift.String)
  @objc deinit
}
public protocol Uri {
  @discardableResult
  func getScheme() -> Swift.String!
  @discardableResult
  func getHost() -> Swift.String!
  @discardableResult
  func getPath() -> Swift.String!
  @discardableResult
  func getPathSegments() -> XPlatPaySDK.YSArray<Swift.String>
  @discardableResult
  func getQuery() -> Swift.String!
  @discardableResult
  func getQueryParameter(_ name: Swift.String) -> Swift.String!
  @discardableResult
  func getQueryParameterNames() -> XPlatPaySDK.YSArray<Swift.String>
  @discardableResult
  func getQueryParameters(_ name: Swift.String) -> XPlatPaySDK.YSArray<Swift.String>
  @discardableResult
  func getAllQueryParameters() -> XPlatPaySDK.YSArray<XPlatPaySDK.UriQueryParameter>
  @discardableResult
  func getFragment() -> Swift.String!
  @discardableResult
  func getAbsoluteString() -> Swift.String
  @discardableResult
  func isFileUri() -> Swift.Bool
  @discardableResult
  func builder() -> XPlatPaySDK.UriBuilder
}
public protocol UriBuilder {
  @discardableResult
  func setScheme(_ value: Swift.String) -> XPlatPaySDK.UriBuilder
  @discardableResult
  func setHost(_ value: Swift.String) -> XPlatPaySDK.UriBuilder
  @discardableResult
  func setPath(_ value: Swift.String) -> XPlatPaySDK.UriBuilder
  @discardableResult
  func appendQueryParameter(_ name: Swift.String, _ value: Swift.String) -> XPlatPaySDK.UriBuilder
  @discardableResult
  func setAllQueryParameters(_ values: XPlatPaySDK.YSArray<XPlatPaySDK.UriQueryParameter>) -> XPlatPaySDK.UriBuilder
  @discardableResult
  func clearQuery() -> XPlatPaySDK.UriBuilder
  @discardableResult
  func setFragment(_ value: Swift.String) -> XPlatPaySDK.UriBuilder
  @discardableResult
  func build() -> XPlatPaySDK.Uri
}
open class Box<T> {
  final public let value: T
  public init(_ value: T)
  @objc deinit
}
open class SyncUserCardRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let cardId: Swift.String
  public init(_ cardId: Swift.String)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @discardableResult
  override open func params() -> XPlatPaySDK.NetworkParams
  override public init()
  @objc deinit
}
open class MobileBackendInvalidAuthorizationError : XPlatPaySDK.ExternalConvertibleError {
  public init(with message: Swift.String)
  @discardableResult
  open class func tokenExchangeError(_ reason: Swift.String) -> XPlatPaySDK.MobileBackendInvalidAuthorizationError
  @discardableResult
  open class func missingOauthError() -> XPlatPaySDK.MobileBackendInvalidAuthorizationError
  @discardableResult
  open class func missingUidError() -> XPlatPaySDK.MobileBackendInvalidAuthorizationError
  override public init(_ kind: XPlatPaySDK.ExternalErrorKind, _ trigger: XPlatPaySDK.ExternalErrorTrigger, _ code: Swift.Int32!, _ status: Swift.String!, _ message: Swift.String)
  @objc deinit
}
open class MobileBackendAuthorization {
  final public let oauthToken: Swift.String
  final public let uid: Swift.String
  public init(_ oauthToken: Swift.String, _ uid: Swift.String)
  @discardableResult
  open class func fromAuthorizationPair(_ oauthToken: Swift.String!, _ uid: Swift.String!) -> XPlatPaySDK.Result<XPlatPaySDK.MobileBackendAuthorization?>
  @objc deinit
}
public enum AttachOpenMethod : Swift.String {
  case InstalledApp
  case Docviewer
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol EventIdProvider {
  @discardableResult
  func getId() -> Swift.Int64
}
open class TimestampEventIdProvider : XPlatPaySDK.EventIdProvider {
  public init(_ timeProvider: XPlatPaySDK.TimeProvider)
  @discardableResult
  open func getId() -> Swift.Int64
  @objc deinit
}
public protocol SharedPreferencesEditor {
  @discardableResult
  func putInt32(_ key: Swift.String, _ value: Swift.Int32) -> XPlatPaySDK.SharedPreferencesEditor
  @discardableResult
  func putInt64(_ key: Swift.String, _ value: Swift.Int64) -> XPlatPaySDK.SharedPreferencesEditor
  @discardableResult
  func putBoolean(_ key: Swift.String, _ value: Swift.Bool) -> XPlatPaySDK.SharedPreferencesEditor
  @discardableResult
  func putDouble(_ key: Swift.String, _ value: Swift.Double) -> XPlatPaySDK.SharedPreferencesEditor
  @discardableResult
  func putString(_ key: Swift.String, _ value: Swift.String) -> XPlatPaySDK.SharedPreferencesEditor
  @discardableResult
  func putStringSet(_ key: Swift.String, _ value: XPlatPaySDK.YSSet<Swift.String>) -> XPlatPaySDK.SharedPreferencesEditor
  @discardableResult
  func remove(_ key: Swift.String) -> XPlatPaySDK.SharedPreferencesEditor
  @discardableResult
  func clear() -> XPlatPaySDK.SharedPreferencesEditor
  func commit()
  func apply()
}
public protocol SharedPreferences {
  @discardableResult
  func getInt32(_ key: Swift.String, _ def: Swift.Int32) -> Swift.Int32
  @discardableResult
  func getInt64(_ key: Swift.String, _ def: Swift.Int64) -> Swift.Int64
  @discardableResult
  func getBoolean(_ key: Swift.String, _ def: Swift.Bool) -> Swift.Bool
  @discardableResult
  func getDouble(_ key: Swift.String, _ def: Swift.Double) -> Swift.Double
  @discardableResult
  func getString(_ key: Swift.String, _ def: Swift.String!) -> Swift.String!
  @discardableResult
  func getStringSet(_ key: Swift.String, _ def: XPlatPaySDK.YSSet<Swift.String>) -> XPlatPaySDK.YSSet<Swift.String>
  @discardableResult
  func getAll() -> XPlatPaySDK.YSMap<Swift.String, Any>
  @discardableResult
  func contains(_ key: Swift.String) -> Swift.Bool
  @discardableResult
  func edit() -> XPlatPaySDK.SharedPreferencesEditor
}
public protocol SharedPreferencesProvider {
  @discardableResult
  func sharedPreferencesWithName(_ name: Swift.String) -> XPlatPaySDK.SharedPreferences
}
open class UserProfileResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let name: Swift.String
  final public let uid: Swift.String
  final public let hiDpiUrl: Swift.String!
  final public let loDpiUrl: Swift.String!
  public init(_ status: Swift.String, _ code: Swift.Int32, _ name: Swift.String, _ uid: Swift.String, _ hiDpiUrl: Swift.String!, _ loDpiUrl: Swift.String!)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.UserProfileResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
public enum AuthMethods {
  case panOnly
  case cloudToken
  public static func == (a: XPlatPaySDK.AuthMethods, b: XPlatPaySDK.AuthMethods) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@discardableResult
public func authMethodFromString(_ value: Swift.String) -> XPlatPaySDK.AuthMethods!
@discardableResult
public func authMethodToString(_ value: XPlatPaySDK.AuthMethods) -> Swift.String
public enum PaymentMethodTypes {
  case card
  public static func == (a: XPlatPaySDK.PaymentMethodTypes, b: XPlatPaySDK.PaymentMethodTypes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@discardableResult
public func paymentMethodTypeFromString(_ value: Swift.String) -> XPlatPaySDK.PaymentMethodTypes!
@discardableResult
public func paymentMethodTypeToString(_ value: XPlatPaySDK.PaymentMethodTypes) -> Swift.String
public protocol NetworkInterceptor {
  @discardableResult
  func intercept(_ originalRequest: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkRequest>
}
open class NetworkIntermediate : XPlatPaySDK.Network {
  public init(_ delegate: XPlatPaySDK.Network, _ interceptors: XPlatPaySDK.YSArray<XPlatPaySDK.NetworkInterceptor>)
  @discardableResult
  open func execute(_ request: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.JSONItem>
  @discardableResult
  open func executeRaw(_ request: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkResponse>
  @discardableResult
  open func resolveURL(_ request: XPlatPaySDK.NetworkRequest) -> Swift.String!
  @objc deinit
}
open class BankLogoItem {
  final public let light: Swift.String!
  final public let dark: Swift.String!
  final public let mono: Swift.String!
  public init(_ light: Swift.String!, _ dark: Swift.String!, _ mono: Swift.String!)
  @objc deinit
}
public enum CountryCodes {
  case ru
  case us
  public static func == (a: XPlatPaySDK.CountryCodes, b: XPlatPaySDK.CountryCodes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@discardableResult
public func countryCodeFromString(_ value: Swift.String) -> XPlatPaySDK.CountryCodes!
@discardableResult
public func countryCodeToString(_ value: XPlatPaySDK.CountryCodes) -> Swift.String
@discardableResult
public func minInt32(_ a: Swift.Int32, _ b: Swift.Int32) -> Swift.Int32
@discardableResult
public func minInt64(_ a: Swift.Int64, _ b: Swift.Int64) -> Swift.Int64
@discardableResult
public func minDouble(_ a: Swift.Double, _ b: Swift.Double) -> Swift.Double
@discardableResult
public func maxInt32(_ a: Swift.Int32, _ b: Swift.Int32) -> Swift.Int32
@discardableResult
public func maxInt64(_ a: Swift.Int64, _ b: Swift.Int64) -> Swift.Int64
@discardableResult
public func maxDouble(_ a: Swift.Double, _ b: Swift.Double) -> Swift.Double
@_inheritsConvenienceInitializers open class UserProfileRequest : XPlatPaySDK.BaseNetworkRequest {
  override public init()
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @objc deinit
}
open class MessageDTO {
  final public let mid: Swift.Int64
  final public let timestamp: Swift.Int64
  final public let smartRepliesNumber: Swift.Int32!
  public init(_ mid: Swift.Int64, _ timestamp: Swift.Int64, _ smartRepliesNumber: Swift.Int32!)
  @discardableResult
  open class func fromMap(_ map: XPlatPaySDK.YSMap<Swift.String, Any>) -> XPlatPaySDK.MessageDTO
  @discardableResult
  open func toMap() -> XPlatPaySDK.YSMap<Swift.String, Any>
  @discardableResult
  open func toJson() -> XPlatPaySDK.MapJSONItem
  @objc deinit
}
open class MobileBackendVersionHeadersInterceptor : XPlatPaySDK.NetworkInterceptor {
  public init(_ platform: XPlatPaySDK.ClientPlatform, _ version: Swift.String)
  @discardableResult
  open func intercept(_ originalRequest: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkRequest>
  @objc deinit
}
final public class YSMap<K, V> : Swift.Sequence where K : Swift.Hashable {
  public typealias Iterator = Swift.DictionaryIterator<K, V>
  final public func makeIterator() -> XPlatPaySDK.YSMap<K, V>.Iterator
  final public var items: [K : V]
  public init()
  public init(items: [K : V])
  @discardableResult
  final public func set(_ key: K, _ value: V) -> Self
  final public func get(_ key: K) -> V?
  @discardableResult
  final public func delete(_ key: K) -> Swift.Bool
  final public var size: Swift.Int32 {
    get
  }
  final public func keys() -> Swift.Dictionary<K, V>.Keys
  final public func values() -> Swift.Dictionary<K, V>.Values
  final public func clear()
  final public func has(_ key: K) -> Swift.Bool
  final public func __forEach(_ callback: (V, K) throws -> Swift.Void) rethrows
  public typealias Element = Swift.Dictionary<K, V>.Iterator.Element
  @objc deinit
}
extension YSMap : Swift.Decodable where K : Swift.Decodable, V : Swift.Decodable {
  convenience public init(from decoder: Swift.Decoder) throws
}
extension YSMap : Swift.Encodable where K : Swift.Encodable, V : Swift.Encodable {
  final public func encode(to encoder: Swift.Encoder) throws
}
extension YSMap : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
open class PayCheckoutRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let cardId: Swift.String
  final public let merchantOrigin: Swift.String
  final public let paymentSheet: XPlatPaySDK.PaymentSheet
  public init(_ cardId: Swift.String, _ merchantOrigin: Swift.String, _ paymentSheet: XPlatPaySDK.PaymentSheet)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func params() -> XPlatPaySDK.NetworkParams
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  override public init()
  @objc deinit
}
public enum ContactField : Swift.String {
  case Gap
  case Phone
  case Mobile
  case Mail
  case FilteredMails
  case FilteredMailsWithAttaches
  case Telegram
  case Messenger
  case LastMessage
  case Skype
  case Jabber
  case Twitter
  case Facebook
  case VK
  case Instagram
  case NextJointEvent
  case Birthday
  case Description
  case FastActionWriteLetter
  case FastActionCreateEvent
  case FastActionOpenMessenger
  case FastActionCall
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum TransportErrorCodes {
  case noPayload
  case jsonSerializationError
  case dataFormatError
  case badStatusCode
  public static func == (a: XPlatPaySDK.TransportErrorCodes, b: XPlatPaySDK.TransportErrorCodes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class TransportError : XPlatPaySDK.YSError {
  final public let code: XPlatPaySDK.TransportErrorCodes
  final public let underlyingError: XPlatPaySDK.YSError!
  @discardableResult
  open class func payloadError(_ message: Swift.String) -> XPlatPaySDK.TransportError
  @discardableResult
  open class func serializationError(_ message: Swift.String, _ inner: XPlatPaySDK.YSError!) -> XPlatPaySDK.TransportError
  @discardableResult
  open class func dataFormatError(_ message: Swift.String) -> XPlatPaySDK.TransportError
  @discardableResult
  open class func badStatusCode(_ message: Swift.String) -> XPlatPaySDK.TransportError
  override public init(_ message: Swift.String)
  override public init(message: Swift.String, inner: Swift.Error?)
  @objc deinit
}
open class DiehardStatus3dsResponse : XPlatPaySDK.DiehardResponse {
  final public let status3ds: Swift.String!
  public init(_ status: Swift.String, _ statusCode: Swift.String!, _ statusDescription: Swift.String!, _ status3ds: Swift.String!)
  @discardableResult
  open class func status3dsFromJsonItem(_ item: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.DiehardStatus3dsResponse>
  override public init(_ status: Swift.String, _ statusCode: Swift.String!, _ statusDescription: Swift.String!)
  @objc deinit
}
open class FormBody {
  public init(_ encodedNamesAndValues: XPlatPaySDK.YSArray<XPlatPaySDK.YSPair<Swift.String, Swift.String>>)
  @discardableResult
  open func size() -> Swift.Int32
  @discardableResult
  open func encodedName(_ index: Swift.Int32) -> Swift.String
  @discardableResult
  open func name(_ index: Swift.Int32) -> Swift.String
  @discardableResult
  open func encodedValue(_ index: Swift.Int32) -> Swift.String
  @discardableResult
  open func value(_ index: Swift.Int32) -> Swift.String
  @discardableResult
  open func getValue(_ name: Swift.String) -> Swift.String!
  @discardableResult
  open func tryGetValue(_ name: Swift.String) throws -> Swift.String
  @discardableResult
  open func encode() -> Swift.String
  @discardableResult
  open func builder() -> XPlatPaySDK.FormBodyBuilder
  @discardableResult
  open class func build() -> XPlatPaySDK.FormBodyBuilder
  @discardableResult
  open class func parse(_ value: Swift.String) -> XPlatPaySDK.FormBody
  @objc deinit
}
open class FormBodyBuilder {
  public init()
  @discardableResult
  open func add(_ name: Swift.String, _ value: Swift.String) -> XPlatPaySDK.FormBodyBuilder
  @discardableResult
  open func addEncoded(_ name: Swift.String, _ value: Swift.String) -> XPlatPaySDK.FormBodyBuilder
  @discardableResult
  open func build() -> XPlatPaySDK.FormBody
  @objc deinit
}
@_hasMissingDesignatedInitializers open class XPromise<T> {
  @discardableResult
  open func both<R>(_ onResolved: @escaping (T) -> R, _ onRejected: @escaping (XPlatPaySDK.YSError) -> R) -> XPlatPaySDK.XPromise<R>
  @discardableResult
  open func flatBoth<R>(_ onResolved: @escaping (T) -> XPlatPaySDK.XPromise<R>, _ onRejected: @escaping (XPlatPaySDK.YSError) -> XPlatPaySDK.XPromise<R>) -> XPlatPaySDK.XPromise<R>
  @discardableResult
  open func then<R>(_ onResolved: @escaping (T) -> R) -> XPlatPaySDK.XPromise<R>
  @discardableResult
  open func flatThen<R>(_ onResolved: @escaping (T) -> XPlatPaySDK.XPromise<R>) -> XPlatPaySDK.XPromise<R>
  @discardableResult
  open func `catch`(_ onRejected: @escaping (XPlatPaySDK.YSError) -> T) -> XPlatPaySDK.XPromise<T>
  @discardableResult
  open func flatCatch(_ onRejected: @escaping (XPlatPaySDK.YSError) -> XPlatPaySDK.XPromise<T>) -> XPlatPaySDK.XPromise<T>
  open func failed(_ onRejected: @escaping (XPlatPaySDK.YSError) -> Swift.Void)
  @discardableResult
  open func finally(_ onFinally: @escaping () -> Swift.Void) -> XPlatPaySDK.XPromise<T>
  @objc deinit
}
public enum EcomailService : Swift.String {
  case Mail
  case Disk
  case Telemost
  case Calendar
  case ContactCard
  case ContactList
  case ContactAdd
  case ContactEdit
  case Notes
  case Messenger
  case Subscription
  case More
  case Docs
  case Scanner
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum EcomailLayer : Swift.String {
  case Tabbar
  case BottomSheet
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
open class BaseNetworkResponse {
  final public let status: Swift.String
  final public let code: Swift.Int32
  public init(_ status: Swift.String, _ code: Swift.Int32)
  @discardableResult
  open class func fromJSON(_ json: XPlatPaySDK.JSONItem, _ callSite: Swift.String) -> XPlatPaySDK.Result<XPlatPaySDK.BaseNetworkResponse>
  @objc deinit
}
public protocol Network {
  @discardableResult
  func execute(_ request: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.JSONItem>
  @discardableResult
  func executeRaw(_ request: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkResponse>
  @discardableResult
  func resolveURL(_ request: XPlatPaySDK.NetworkRequest) -> Swift.String!
}
@_inheritsConvenienceInitializers public class NetworkError : XPlatPaySDK.YSError {
  public static func badStatusCode(code: Swift.Int32) -> XPlatPaySDK.YSError
  public static func noData() -> XPlatPaySDK.YSError
  public static func unableToDeserialize(inner: Swift.Error) -> XPlatPaySDK.YSError
  override public init(_ message: Swift.String)
  override public init(message: Swift.String, inner: Swift.Error?)
  @objc deinit
}
final public class YSArray<T> : Swift.Sequence, Swift.ExpressibleByArrayLiteral {
  final public var items: [T]
  public typealias Iterator = Swift.Array<T>.Iterator
  final public func makeIterator() -> XPlatPaySDK.YSArray<T>.Iterator
  public init()
  public init(_ array: XPlatPaySDK.YSArray<T>)
  public init(_ items: T...)
  public init(arrayLiteral elements: T...)
  public init(array: [T])
  @discardableResult
  final public func pop() -> T?
  final public func push(_ item: T)
  final public var length: Swift.Int32 {
    get
  }
  final public subscript(index: Swift.Int) -> T {
    get
  }
  final public subscript(index: Swift.Int32) -> T {
    get
    set(newValue)
  }
  final public subscript(index: Swift.Int64) -> T {
    get
  }
  final public func map<U>(_ f: (T) -> U) -> XPlatPaySDK.YSArray<U>
  final public func filter(_ f: (T) -> Swift.Bool) -> XPlatPaySDK.YSArray<T>
  final public func filter(_ f: (T, Swift.Int32) -> Swift.Bool) -> XPlatPaySDK.YSArray<T>
  @discardableResult
  final public func find(_ f: (T) -> Swift.Bool) -> T!
  @discardableResult
  final public func slice(_ start: Swift.Int32 = 0, _ end: Swift.Int32? = nil) -> XPlatPaySDK.YSArray<T>
  final public func concat(_ items: XPlatPaySDK.YSArray<T>) -> XPlatPaySDK.YSArray<T>
  final public var _items: [T] {
    get
  }
  @discardableResult
  final public func reduce<R>(_ f: (R, T) -> R, _ seed: R) -> R
  @discardableResult
  final public func sort(_ comparator: (T, T) -> Swift.Int32) -> XPlatPaySDK.YSArray<T>
  @discardableResult
  final public func reverse() -> XPlatPaySDK.YSArray<T>
  @discardableResult
  final public func shift() -> T?
  @discardableResult
  final public func unshift(_ item: T) -> Swift.Int32
  @discardableResult
  final public func splice(_ start: Swift.Int32, _ deleteCount: Swift.Int32? = nil) -> XPlatPaySDK.YSArray<T>
  @discardableResult
  final public func flatMap<R>(_ f: (T) -> XPlatPaySDK.YSArray<R>) -> XPlatPaySDK.YSArray<R>
  public typealias ArrayLiteralElement = T
  public typealias Element = Swift.IndexingIterator<Swift.Array<T>>.Element
  @objc deinit
}
extension YSArray : Swift.Decodable where T : Swift.Decodable {
  convenience public init(from decoder: Swift.Decoder) throws
}
extension YSArray : Swift.Encodable where T : Swift.Encodable {
  final public func encode(to encoder: Swift.Encoder) throws
}
extension YSArray where T == Swift.String {
  final public func join(_ separator: Swift.String) -> Swift.String
}
extension YSArray : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: XPlatPaySDK.YSArray<T>, rhs: XPlatPaySDK.YSArray<T>) -> Swift.Bool
}
extension YSArray where T : Swift.Equatable {
  final public func lastIndexOf(_ item: T) -> Swift.Int32
  final public func includes(_ item: T) -> Swift.Bool
}
extension YSArray : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers public class JSONSerializerError : XPlatPaySDK.YSError {
  public static func unableToSerialize(inner: Swift.Error?) -> XPlatPaySDK.YSError
  public static func dataToStringConversionFailed() -> XPlatPaySDK.YSError
  public static func stringToDataConversionFailed() -> XPlatPaySDK.YSError
  public static func unableToDeserialize(inner: Swift.Error) -> XPlatPaySDK.YSError
  public static func badTopLevelObject(kind: XPlatPaySDK.JSONItemKind) -> XPlatPaySDK.YSError
  public static func materializerFailed(inner: XPlatPaySDK.YSError) -> XPlatPaySDK.YSError
  override public init(_ message: Swift.String)
  override public init(message: Swift.String, inner: Swift.Error?)
  @objc deinit
}
extension JSONItemKind : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol TimeProvider {
  @discardableResult
  func getCurrentTimeMs() -> Swift.Int64
}
@_hasMissingDesignatedInitializers open class NativeTimeProvider : XPlatPaySDK.TimeProvider {
  @discardableResult
  open func getCurrentTimeMs() -> Swift.Int64
  @objc deinit
}
open class BankLogo {
  final public let full: XPlatPaySDK.BankLogoItem
  final public let short: XPlatPaySDK.BankLogoItem
  public init(_ full: XPlatPaySDK.BankLogoItem, _ short: XPlatPaySDK.BankLogoItem)
  @objc deinit
}
open class MobileBackendAdditionalHeadersInterceptor : XPlatPaySDK.NetworkInterceptor {
  public init(_ forceCVV: Swift.Bool)
  @discardableResult
  open func intercept(_ originalRequest: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkRequest>
  @objc deinit
}
public typealias Executor<T> = (@escaping (T) -> Swift.Void, @escaping (XPlatPaySDK.YSError) -> Swift.Void) -> Swift.Void
public enum XPromisesFramework {
  public static var queue: Dispatch.DispatchQueue
  public static var isSetup: Swift.Bool {
    get
  }
  public static func setup(queue: Dispatch.DispatchQueue = XPromisesFramework.queue)
}
public func promise<T>(_ executor: @escaping XPlatPaySDK.Executor<T>) -> XPlatPaySDK.XPromise<T>
public func resolve<T>(_ value: T) -> XPlatPaySDK.XPromise<T>
public func reject<T>(_ reason: XPlatPaySDK.YSError) -> XPlatPaySDK.XPromise<T>
public func reject(_ reason: XPlatPaySDK.YSError) -> XPlatPaySDK.XPromise<Swift.Void>
public func all<T>(_ promises: XPlatPaySDK.YSArray<XPlatPaySDK.XPromise<T>>) -> XPlatPaySDK.XPromise<XPlatPaySDK.YSArray<T>>
public func race<T>(_ promises: XPlatPaySDK.YSArray<XPlatPaySDK.XPromise<T>>) -> XPlatPaySDK.XPromise<T>
open class YandexPayApiFactory {
  public init(_ network: XPlatPaySDK.Network, _ serializer: XPlatPaySDK.JSONSerializer)
  @discardableResult
  open func createForUser(_ oauthToken: Swift.String, _ defaultUid: Swift.Int32! = nil) -> XPlatPaySDK.YandexPayApi
  @objc deinit
}
open class VerifyBindingResponse {
  final public let purchaseToken: Swift.String
  public init(_ purchaseToken: Swift.String)
  @discardableResult
  open class func fromJsonItem(_ item: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.VerifyBindingResponse>
  @objc deinit
}
open class InitInstallRewardRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let deviceId: Swift.String
  public init(_ deviceId: Swift.String)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func params() -> XPlatPaySDK.NetworkParams
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  override public init()
  @objc deinit
}
public protocol CheckBindingPaymentPolling {
  @discardableResult
  func checkResponse(_ response: XPlatPaySDK.CheckBindingPaymentResponse) -> XPlatPaySDK.Result<XPlatPaySDK.PollingStep>
}
open class CheckBindingPaymentPollingHandler : XPlatPaySDK.CheckBindingPaymentPolling {
  public init(_ callback: XPlatPaySDK.ChallengeCallback)
  @discardableResult
  open func checkResponse(_ response: XPlatPaySDK.CheckBindingPaymentResponse) -> XPlatPaySDK.Result<XPlatPaySDK.PollingStep>
  @objc deinit
}
public enum CardNetworks {
  case amex
  case discover
  case jcb
  case masterCard
  case visa
  case mir
  case unionPay
  case uzCard
  case maestro
  case visaElectron
  public static func == (a: XPlatPaySDK.CardNetworks, b: XPlatPaySDK.CardNetworks) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@discardableResult
public func cardNetworkFromString(_ value: Swift.String) -> XPlatPaySDK.CardNetworks!
@discardableResult
public func cardNetworkToString(_ value: XPlatPaySDK.CardNetworks) -> Swift.String
public func getVoid()
open class Result<T> {
  public init(_ value: T!, _ error: XPlatPaySDK.YSError!)
  @discardableResult
  open func isValue() -> Swift.Bool
  @discardableResult
  open func isError() -> Swift.Bool
  @discardableResult
  open func getValue() -> T
  @discardableResult
  open func getError() -> XPlatPaySDK.YSError
  @discardableResult
  open func tryGetValue() throws -> T
  @discardableResult
  open func withValue<U>(_ f: @escaping (T) -> U) -> U!
  @discardableResult
  open func map<U>(_ f: @escaping (T) -> U) -> XPlatPaySDK.Result<U>
  @discardableResult
  open func flatMap<U>(_ f: @escaping (T) -> XPlatPaySDK.Result<U>) -> XPlatPaySDK.Result<U>
  @discardableResult
  open func asNullable() -> T!
  @objc deinit
}
@discardableResult
public func resultValue<T>(_ value: T) -> XPlatPaySDK.Result<T>
@discardableResult
public func resultError<T>(_ error: XPlatPaySDK.YSError) -> XPlatPaySDK.Result<T>
final public class DefaultUri : XPlatPaySDK.Uri {
  final public let url: Foundation.URL
  public init(url: Foundation.URL)
  final public func getScheme() -> Swift.String!
  final public func getHost() -> Swift.String!
  final public func getPath() -> Swift.String!
  final public func getPathSegments() -> XPlatPaySDK.YSArray<Swift.String>
  final public func getQuery() -> Swift.String!
  final public func getQueryParameter(_ name: Swift.String) -> Swift.String!
  final public func getQueryParameterNames() -> XPlatPaySDK.YSArray<Swift.String>
  final public func getQueryParameters(_ name: Swift.String) -> XPlatPaySDK.YSArray<Swift.String>
  final public func getAllQueryParameters() -> XPlatPaySDK.YSArray<XPlatPaySDK.UriQueryParameter>
  final public func getFragment() -> Swift.String!
  final public func getAbsoluteString() -> Swift.String
  final public func isFileUri() -> Swift.Bool
  final public func builder() -> XPlatPaySDK.UriBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Uris {
  public static func fromFilePath(_ filePath: Swift.String) -> XPlatPaySDK.Uri
  public static func fromString(_ value: Swift.String) -> XPlatPaySDK.Uri!
  @objc deinit
}
final public class DefaultUriBuilder : XPlatPaySDK.UriBuilder {
  final public var urlComponents: Foundation.URLComponents
  public init(urlComponents: Foundation.URLComponents)
  final public func setScheme(_ value: Swift.String) -> XPlatPaySDK.UriBuilder
  final public func setHost(_ value: Swift.String) -> XPlatPaySDK.UriBuilder
  final public func setPath(_ value: Swift.String) -> XPlatPaySDK.UriBuilder
  final public func appendQueryParameter(_ name: Swift.String, _ value: Swift.String) -> XPlatPaySDK.UriBuilder
  final public func setAllQueryParameters(_ values: XPlatPaySDK.YSArray<XPlatPaySDK.UriQueryParameter>) -> XPlatPaySDK.UriBuilder
  final public func clearQuery() -> XPlatPaySDK.UriBuilder
  final public func setFragment(_ value: Swift.String) -> XPlatPaySDK.UriBuilder
  final public func build() -> XPlatPaySDK.Uri
  @objc deinit
}
extension UriQueryParameter : Swift.Equatable {
  public static func == (lhs: XPlatPaySDK.UriQueryParameter, rhs: XPlatPaySDK.UriQueryParameter) -> Swift.Bool
}
public func percentEncode(_ value: Swift.String, _ plusIsSpace: Swift.Bool) -> Swift.String
public func percentDecode(_ value: Swift.String, _ plusIsSpace: Swift.Bool) -> Swift.String
public protocol CardDataCipher {
  @discardableResult
  func encrypt(_ data: Swift.String) -> XPlatPaySDK.XPromise<XPlatPaySDK.CardDataCipherResult>
}
open class CardDataCipherResult {
  final public let dataEncryptedBase64: Swift.String
  final public let hashAlgorithm: Swift.String
  public init(_ dataEncryptedBase64: Swift.String, _ hashAlgorithm: Swift.String)
  @objc deinit
}
open class CardBindingInfo {
  final public let cardId: Swift.String
  final public let rrn: Swift.String!
  public init(_ cardId: Swift.String, _ rrn: Swift.String!)
  @objc deinit
}
open class CardBindingService {
  public init(_ payer: XPlatPaySDK.Payer, _ serviceToken: Swift.String, _ serializer: XPlatPaySDK.JSONSerializer, _ cardDataCipher: XPlatPaySDK.CardDataCipher, _ mobileBackendApi: XPlatPaySDK.MobileBackendApi, _ diehardBackendAPI: XPlatPaySDK.DiehardBackendApi, _ regionId: Swift.Int32, _ pollingConfig: XPlatPaySDK.CheckPaymentPollingConfig = CheckPaymentPollingConfig.defaultConfig())
  @discardableResult
  open func bind(_ card: XPlatPaySDK.NewCard, _ callback: XPlatPaySDK.ChallengeCallback) -> XPlatPaySDK.XPromise<XPlatPaySDK.CardBindingInfo>
  @discardableResult
  open func isCancelled() -> Swift.Bool
  open func cancel()
  @objc deinit
}
public protocol JSONSerializer {
  @discardableResult
  func serialize(_ item: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<Swift.String>
  @discardableResult
  func deserialize(_ item: Swift.String) -> XPlatPaySDK.Result<XPlatPaySDK.JSONItem>
}
final public class DefaultJSONSerializer : XPlatPaySDK.JSONSerializer {
  public init()
  final public func serialize(_ item: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<Swift.String>
  final public func deserialize(_ item: Swift.String) -> XPlatPaySDK.Result<XPlatPaySDK.JSONItem>
  @objc deinit
}
@_inheritsConvenienceInitializers open class RegisterPushTokenResponse : XPlatPaySDK.BaseNetworkResponse {
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.RegisterPushTokenResponse>
  @objc deinit
}
open class MobileFileSystemPath : XPlatPaySDK.FileSystemPath {
  final public let separator: Swift.String
  public init(_ separator: Swift.String = "/")
  @discardableResult
  open func isAbsolute(_ p: Swift.String) -> Swift.Bool
  @discardableResult
  open func normalize(_ p: Swift.String) -> Swift.String
  @discardableResult
  open func join(_ paths: XPlatPaySDK.YSArray<Swift.String>) -> Swift.String
  @discardableResult
  open func dirname(_ p: Swift.String) -> Swift.String
  @discardableResult
  open func basename(_ p: Swift.String) -> Swift.String
  @discardableResult
  open func extname(_ p: Swift.String) -> Swift.String
  @discardableResult
  open func name(_ p: Swift.String) -> Swift.String
  @discardableResult
  open func parse(_ p: Swift.String) -> XPlatPaySDK.ParsedPath
  @objc deinit
}
public protocol Aggregator {
  @discardableResult
  func accepts(_ event: XPlatPaySDK.EventusEvent) -> Swift.Bool
  @discardableResult
  func accept(_ event: XPlatPaySDK.EventusEvent) -> XPlatPaySDK.EventusEvent!
  @discardableResult
  func finalize() -> XPlatPaySDK.EventusEvent!
}
@_hasMissingDesignatedInitializers open class EmptyAggregator : XPlatPaySDK.Aggregator {
  @discardableResult
  open func accept(_ event: XPlatPaySDK.EventusEvent) -> XPlatPaySDK.EventusEvent!
  @discardableResult
  open func accepts(_ _event: XPlatPaySDK.EventusEvent) -> Swift.Bool
  @discardableResult
  open func finalize() -> XPlatPaySDK.EventusEvent!
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Collections {
  @discardableResult
  open class func maxInt64<T>(_ items: XPlatPaySDK.YSArray<T>, _ fetch: @escaping (T) -> Swift.Int64) -> Swift.Int64!
  @discardableResult
  open class func maxInt32<T>(_ items: XPlatPaySDK.YSArray<T>, _ fetch: @escaping (T) -> Swift.Int32) -> Swift.Int32!
  @discardableResult
  open class func sumBy<T>(_ items: XPlatPaySDK.YSArray<T>, _ fetch: @escaping (T) -> Swift.Int32) -> Swift.Int32
  @discardableResult
  open class func flatten<T>(_ array: XPlatPaySDK.YSArray<XPlatPaySDK.YSArray<T>>) -> XPlatPaySDK.YSArray<T>
  @discardableResult
  open class func setMinus<T>(_ a: XPlatPaySDK.YSSet<T>, _ b: XPlatPaySDK.YSSet<T>) -> XPlatPaySDK.YSSet<T> where T : Swift.Hashable
  @discardableResult
  open class func zip2With<T, U, Z>(_ first: XPlatPaySDK.YSArray<T>, _ second: XPlatPaySDK.YSArray<U>, _ zipper: @escaping (T, U) -> Z) -> XPlatPaySDK.YSArray<Z>
  @discardableResult
  open class func setIntersect<T>(_ a: XPlatPaySDK.YSSet<T>, _ b: XPlatPaySDK.YSSet<T>) -> XPlatPaySDK.YSSet<T> where T : Swift.Hashable
  @discardableResult
  open class func setSubtract<T>(_ a: XPlatPaySDK.YSSet<T>, _ b: XPlatPaySDK.YSSet<T>) -> XPlatPaySDK.YSSet<T> where T : Swift.Hashable
  @discardableResult
  open class func mapKeys<K, V, R>(_ map: XPlatPaySDK.YSMap<K, V>, _ transform: @escaping (K) -> R) -> XPlatPaySDK.YSMap<R, V> where K : Swift.Hashable, R : Swift.Hashable
  @discardableResult
  open class func mapNotNull<T, R>(_ array: XPlatPaySDK.YSArray<T>, _ transform: @escaping (T) -> R?) -> XPlatPaySDK.YSArray<R>
  @objc deinit
}
open class YSPair<T, U> {
  final public let first: T
  final public let second: U
  public init(_ first: T, _ second: U)
  @objc deinit
}
open class YSTriplet<T, U, V> {
  final public let first: T
  final public let second: U
  final public let third: V
  public init(_ first: T, _ second: U, _ third: V)
  @objc deinit
}
public protocol UserDefaultsProvider {
  func dictionary(forKey: Swift.String) -> [Swift.String : Any]?
  func set(_ value: Any?, forKey defaultName: Swift.String)
}
extension UserDefaults : XPlatPaySDK.UserDefaultsProvider {
}
final public class DefaultSharedPreferencesProvider : XPlatPaySDK.SharedPreferencesProvider {
  public init(userDefaultsProvider: XPlatPaySDK.UserDefaultsProvider)
  @discardableResult
  final public func sharedPreferencesWithName(_ name: Swift.String) -> XPlatPaySDK.SharedPreferences
  @objc deinit
}
public enum BankName : Swift.String {
  case AlfaBank
  case SberBank
  case Tinkoff
  case Vtb
  case GazpromBank
  case BankOfMoscow
  case OpenBank
  case PromsvyazBank
  case RosBank
  case Qiwi
  case CitiBank
  case UnicreditBank
  case RaiffeisenBank
  case UnknownBank
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@discardableResult
public func stringToBankName(_ strName: Swift.String!) -> XPlatPaySDK.BankName
open class SetDefaultCardRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let cardId: Swift.String
  public init(_ cardId: Swift.String)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  override public init()
  @objc deinit
}
open class EncryptedAppIdResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let encryptedAppId: Swift.String
  public init(_ status: Swift.String, _ code: Swift.Int32, _ encryptedAppId: Swift.String)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.EncryptedAppIdResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
public protocol NetworkServiceErrorProcessor {
  @discardableResult
  func extractError(_ errorBody: XPlatPaySDK.JSONItem) -> XPlatPaySDK.NetworkServiceError!
  @discardableResult
  func validateResponse(_ body: XPlatPaySDK.JSONItem) -> XPlatPaySDK.NetworkServiceError!
  @discardableResult
  func wrapError(_ error: XPlatPaySDK.NetworkServiceError) -> XPlatPaySDK.NetworkServiceError
}
open class NetworkService {
  public init(_ network: XPlatPaySDK.Network, _ serializer: XPlatPaySDK.JSONSerializer, _ errorProcessor: XPlatPaySDK.NetworkServiceErrorProcessor)
  @discardableResult
  open func performRequest<T>(_ request: XPlatPaySDK.NetworkRequest, _ parse: @escaping (XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<T>) -> XPlatPaySDK.XPromise<T>
  @objc deinit
}
open class UserCard {
  final public let id: Swift.String
  final public let trustCardId: Swift.String!
  final public let allowedAuthMethods: XPlatPaySDK.YSArray<XPlatPaySDK.AuthMethods>
  final public let issuerBank: Swift.String
  final public let uid: Swift.Int32
  final public let cardNetwork: XPlatPaySDK.CardNetworks
  final public let last4Digits: Swift.String
  final public let cardArt: XPlatPaySDK.CardArt
  final public let bin: Swift.String
  public init(_ id: Swift.String, _ trustCardId: Swift.String!, _ allowedAuthMethods: XPlatPaySDK.YSArray<XPlatPaySDK.AuthMethods>, _ issuerBank: Swift.String, _ uid: Swift.Int32, _ cardNetwork: XPlatPaySDK.CardNetworks, _ last4Digits: Swift.String, _ cardArt: XPlatPaySDK.CardArt, _ bin: Swift.String)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.UserCard>
  @objc deinit
}
final public class DefaultFileSystem : XPlatPaySDK.FileSystemImplementation, XPlatPaySDK.FileSystemDirectories {
  final public let documentDirectory: Swift.String
  final public let cachesDirectory: Swift.String
  public init()
  final public func getItemInfo(_ path: Swift.String) -> XPlatPaySDK.XPromise<XPlatPaySDK.ItemInfo>
  final public func exists(_ path: Swift.String) -> XPlatPaySDK.XPromise<Swift.Bool>
  final public func listDirectory(_ path: Swift.String) -> XPlatPaySDK.XPromise<XPlatPaySDK.YSArray<Swift.String>>
  final public func readAsStringWithParams(_ path: Swift.String, _ parameters: XPlatPaySDK.ReadParameters) -> XPlatPaySDK.XPromise<Swift.String>
  final public func writeAsStringWithParams(_ path: Swift.String, _ contents: Swift.String, _ parameters: XPlatPaySDK.WriteParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  final public func readArrayBufferWithParams(_ path: Swift.String, _ parameters: XPlatPaySDK.ReadParameters) -> XPlatPaySDK.XPromise<XPlatPaySDK.ArrayBuffer>
  final public func writeArrayBufferWithParams(_ path: Swift.String, _ contents: XPlatPaySDK.ArrayBuffer, _ parameters: XPlatPaySDK.WriteParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  final public func deleteWithParams(_ path: Swift.String, _ parameters: XPlatPaySDK.DeleteParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  final public func moveWithParams(_ source: Swift.String, _ destination: Swift.String, _ parameters: XPlatPaySDK.MoveParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  final public func copyWithParams(_ source: Swift.String, _ destination: Swift.String, _ parameters: XPlatPaySDK.CopyParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  final public func makeDirectoryWithParams(_ path: Swift.String, _ parameters: XPlatPaySDK.MakeDirectoryParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  final public func hash(_ path: Swift.String, _ algorithm: XPlatPaySDK.HashType) -> XPlatPaySDK.XPromise<Swift.String>
  @objc deinit
}
open class MobileBackendApiError : XPlatPaySDK.NetworkServiceError {
  final public let error: XPlatPaySDK.MobileBackendErrorResponse
  public init(_ error: XPlatPaySDK.MobileBackendErrorResponse)
  @discardableResult
  override open func convertToExternalError() -> XPlatPaySDK.ExternalError
  override public init(_ kind: XPlatPaySDK.ExternalErrorKind, _ trigger: XPlatPaySDK.ExternalErrorTrigger, _ statusCode: Swift.Int32!, _ message: Swift.String)
  @objc deinit
}
open class MobileBackendApi {
  public init(_ networkService: XPlatPaySDK.NetworkService)
  @discardableResult
  open class func create(_ network: XPlatPaySDK.Network, _ serializer: XPlatPaySDK.JSONSerializer, _ serviceToken: Swift.String, _ authorizationProvider: @escaping () -> XPlatPaySDK.XPromise<XPlatPaySDK.MobileBackendAuthorization?>, _ platform: XPlatPaySDK.ClientPlatform, _ version: Swift.String, _ forceCVV: Swift.Bool, _ passportToken: Swift.String!) -> XPlatPaySDK.MobileBackendApi
  @discardableResult
  open func verifyBinding(_ request: XPlatPaySDK.VerifyBindingRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.VerifyBindingResponse>
  @objc deinit
}
@_hasMissingDesignatedInitializers open class MobileBackendErrorProcessor : XPlatPaySDK.NetworkServiceErrorProcessor {
  @discardableResult
  open func extractError(_ errorBody: XPlatPaySDK.JSONItem) -> XPlatPaySDK.NetworkServiceError!
  @discardableResult
  open func validateResponse(_ body: XPlatPaySDK.JSONItem) -> XPlatPaySDK.NetworkServiceError!
  @discardableResult
  open func wrapError(_ error: XPlatPaySDK.NetworkServiceError) -> XPlatPaySDK.NetworkServiceError
  @objc deinit
}
@discardableResult
public func requireNotNull<T>(_ value: T!, _ error: XPlatPaySDK.YSError) throws -> T
@discardableResult
public func maskCardNumberWithBin(_ cardNumber: Swift.String) -> Swift.String
public protocol FileSystemDirectories {
  var documentDirectory: Swift.String { get }
  var cachesDirectory: Swift.String { get }
}
open class FileSystem {
  final public let directories: XPlatPaySDK.FileSystemDirectories
  final public let path: XPlatPaySDK.FileSystemPath
  public init(_ directories: XPlatPaySDK.FileSystemDirectories, _ path: XPlatPaySDK.FileSystemPath, _ implementation: XPlatPaySDK.FileSystemImplementation)
  @discardableResult
  open func getItemInfo(_ path: Swift.String) -> XPlatPaySDK.XPromise<XPlatPaySDK.ItemInfo>
  @discardableResult
  open func exists(_ path: Swift.String) -> XPlatPaySDK.XPromise<Swift.Bool>
  @discardableResult
  open func listDirectory(_ path: Swift.String) -> XPlatPaySDK.XPromise<XPlatPaySDK.YSArray<Swift.String>>
  @discardableResult
  open func readAsString(_ path: Swift.String, _ encoding: XPlatPaySDK.Encoding = Encoding.Utf8, _ position: Swift.Int64! = nil, _ length: Swift.Int64! = nil) -> XPlatPaySDK.XPromise<Swift.String>
  @discardableResult
  open func writeAsString(_ path: Swift.String, _ contents: Swift.String, _ encoding: XPlatPaySDK.Encoding = Encoding.Utf8, _ overwrite: Swift.Bool = false) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  open func readArrayBuffer(_ path: Swift.String, _ position: Swift.Int64! = nil, _ length: Swift.Int64! = nil) -> XPlatPaySDK.XPromise<XPlatPaySDK.ArrayBuffer>
  @discardableResult
  open func writeArrayBuffer(_ path: Swift.String, _ contents: XPlatPaySDK.ArrayBuffer, _ overwrite: Swift.Bool = false) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  open func delete(_ path: Swift.String, _ ignoreAbsence: Swift.Bool = false) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  open func move(_ source: Swift.String, _ destination: Swift.String, _ createIntermediates: Swift.Bool = true, _ overwrite: Swift.Bool = false) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  open func copy(_ source: Swift.String, _ destination: Swift.String, _ createIntermediates: Swift.Bool = true) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  open func makeDirectory(_ path: Swift.String, _ createIntermediates: Swift.Bool = true) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  open func createNewFile(_ path: Swift.String, _ createIntermediates: Swift.Bool = true) -> XPlatPaySDK.XPromise<Swift.Bool>
  @discardableResult
  open func hash(_ path: Swift.String, _ algorithm: XPlatPaySDK.HashType) -> XPlatPaySDK.XPromise<Swift.String>
  @discardableResult
  open func ensureFolderExists(_ path: Swift.String) -> XPlatPaySDK.XPromise<Swift.Void>
  @objc deinit
}
@_hasMissingDesignatedInitializers open class EventusConstants {
  public static let ERROR: Swift.String
  public static let PREFIX: Swift.String
  public static let SUCCESS_SUFFIX: Swift.String
  public static let FAILURE_SUFFIX: Swift.String
  public static let EVENTUS_ID: Swift.String
  public static let ORIGIN_EVENTUS_ID: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers open class EventusEvent {
  final public let name: Swift.String
  @discardableResult
  open class func fromMap(_ name: Swift.String, _ attributes: XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem> = YSMap()) -> XPlatPaySDK.EventusEvent
  @discardableResult
  open class func newClientEvent(_ name: Swift.String, _ builder: XPlatPaySDK.ValueMapBuilder = ValueMapBuilder.userEvent()) -> XPlatPaySDK.EventusEvent
  @discardableResult
  open class func eventCreationErrorEvent(_ event: Swift.String, _ reason: Swift.String) -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func getAttributes() -> XPlatPaySDK.YSMap<Swift.String, Any>
  @discardableResult
  open func getInt64(_ attribute: Swift.String) -> Swift.Int64!
  @discardableResult
  open func getInt32(_ attribute: Swift.String) -> Swift.Int32!
  open func reportVia(_ reporter: XPlatPaySDK.EventReporter)
  open func report()
  @discardableResult
  open func success(_ moreValues: XPlatPaySDK.ValueMapBuilder! = nil) -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func failure(_ reason: Swift.String! = nil, _ moreValues: XPlatPaySDK.ValueMapBuilder! = nil) -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func traceExecution<T>(_ promise: XPlatPaySDK.XPromise<T>) -> XPlatPaySDK.XPromise<T>
  @objc deinit
}
open class LoggingEvent {
  final public let name: Swift.String
  final public let attributes: XPlatPaySDK.YSMap<Swift.String, Any>
  public init(_ name: Swift.String, _ attributes: XPlatPaySDK.YSMap<Swift.String, Any>)
  @discardableResult
  open class func fromEventusEvent(_ event: XPlatPaySDK.EventusEvent) -> XPlatPaySDK.LoggingEvent
  @discardableResult
  open class func getFormattedName(_ eventName: Swift.String) -> Swift.String
  @objc deinit
}
open class ExternalError {
  final public let kind: XPlatPaySDK.ExternalErrorKind
  final public let trigger: XPlatPaySDK.ExternalErrorTrigger
  final public let code: Swift.Int32!
  final public let status: Swift.String!
  final public let message: Swift.String
  public init(_ kind: XPlatPaySDK.ExternalErrorKind, _ trigger: XPlatPaySDK.ExternalErrorTrigger, _ code: Swift.Int32!, _ status: Swift.String!, _ message: Swift.String)
  @discardableResult
  open class func convert(_ error: XPlatPaySDK.YSError) -> XPlatPaySDK.ExternalError
  @objc deinit
}
open class ExternalConvertibleError : XPlatPaySDK.YSError {
  final public let kind: XPlatPaySDK.ExternalErrorKind
  final public let trigger: XPlatPaySDK.ExternalErrorTrigger
  final public let code: Swift.Int32!
  final public let status: Swift.String!
  public init(_ kind: XPlatPaySDK.ExternalErrorKind, _ trigger: XPlatPaySDK.ExternalErrorTrigger, _ code: Swift.Int32!, _ status: Swift.String!, _ message: Swift.String)
  @discardableResult
  open func convertToExternalError() -> XPlatPaySDK.ExternalError
  override public init(_ message: Swift.String)
  override public init(message: Swift.String, inner: Swift.Error?)
  @objc deinit
}
public enum ExternalErrorTrigger {
  case internal_sdk
  case mobile_backend
  case diehard
  case nspk
  public static func == (a: XPlatPaySDK.ExternalErrorTrigger, b: XPlatPaySDK.ExternalErrorTrigger) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ExternalErrorKind {
  case unknown
  case internal_error
  case authorization
  case network
  case fail_3ds
  case expired_card
  case invalid_processing_request
  case limit_exceeded
  case not_enough_funds
  case payment_authorization_reject
  case payment_cancelled
  case payment_gateway_technical_error
  case payment_timeout
  case promocode_already_used
  case restricted_card
  case transaction_not_permitted
  case user_cancelled
  case card_validation_invalid_argument
  case apple_pay
  case google_pay
  case too_many_cards
  case no_email
  public static func == (a: XPlatPaySDK.ExternalErrorKind, b: XPlatPaySDK.ExternalErrorKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@discardableResult
public func mobileBackendStatusToKind(_ code: Swift.Int32) -> XPlatPaySDK.ExternalErrorKind
@discardableResult
public func diehardStatusToKind(_ response: XPlatPaySDK.DiehardStatus3dsResponse) -> XPlatPaySDK.ExternalErrorKind
public enum JSONItemKind {
  case integer
  case double
  case string
  case boolean
  case nullItem
  case map
  case array
  public static func == (a: XPlatPaySDK.JSONItemKind, b: XPlatPaySDK.JSONItemKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@discardableResult
public func JSONItemKindToString(_ kind: XPlatPaySDK.JSONItemKind) -> Swift.String
open class JSONItem {
  final public let kind: XPlatPaySDK.JSONItemKind
  public init(_ kind: XPlatPaySDK.JSONItemKind)
  @discardableResult
  open func isIntegerJSONItem() -> Swift.Bool
  @discardableResult
  open func isDoubleJSONItem() -> Swift.Bool
  @discardableResult
  open func isStringJSONItem() -> Swift.Bool
  @discardableResult
  open func isBooleanJSONItem() -> Swift.Bool
  @discardableResult
  open func isNullJSONItem() -> Swift.Bool
  @discardableResult
  open func isMapJSONItem() -> Swift.Bool
  @discardableResult
  open func isArrayJSONItem() -> Swift.Bool
  @discardableResult
  open func castAsIntegerJSONItem() -> XPlatPaySDK.IntegerJSONItem!
  @discardableResult
  open func castAsDoubleJSONItem() -> XPlatPaySDK.DoubleJSONItem!
  @discardableResult
  open func castAsStringJSONItem() -> XPlatPaySDK.StringJSONItem!
  @discardableResult
  open func castAsBooleanJSONItem() -> XPlatPaySDK.BooleanJSONItem!
  @discardableResult
  open func castAsNullJSONItem() -> XPlatPaySDK.NullJSONItem!
  @discardableResult
  open func castAsMapJSONItem() -> XPlatPaySDK.MapJSONItem!
  @discardableResult
  open func castAsArrayJSONItem() -> XPlatPaySDK.ArrayJSONItem!
  @discardableResult
  open func tryCastAsIntegerJSONItem() throws -> XPlatPaySDK.IntegerJSONItem
  @discardableResult
  open func tryCastAsDoubleJSONItem() throws -> XPlatPaySDK.DoubleJSONItem
  @discardableResult
  open func tryCastAsStringJSONItem() throws -> XPlatPaySDK.StringJSONItem
  @discardableResult
  open func tryCastAsBooleanJSONItem() throws -> XPlatPaySDK.BooleanJSONItem
  @discardableResult
  open func tryCastAsNullJSONItem() throws -> XPlatPaySDK.NullJSONItem
  @discardableResult
  open func tryCastAsMapJSONItem() throws -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func tryCastAsArrayJSONItem() throws -> XPlatPaySDK.ArrayJSONItem
  @objc deinit
}
@_hasMissingDesignatedInitializers open class IntegerJSONItem : XPlatPaySDK.JSONItem {
  final public let isInt64: Swift.Bool
  @discardableResult
  open class func fromInt32(_ value: Swift.Int32) -> XPlatPaySDK.IntegerJSONItem
  @discardableResult
  open class func fromInt64(_ value: Swift.Int64) -> XPlatPaySDK.IntegerJSONItem
  @discardableResult
  open func asInt32() -> Swift.Int32
  @discardableResult
  open func asInt64() -> Swift.Int64
  override public init(_ kind: XPlatPaySDK.JSONItemKind)
  @objc deinit
}
open class DoubleJSONItem : XPlatPaySDK.JSONItem {
  final public let value: Swift.Double
  public init(_ value: Swift.Double)
  override public init(_ kind: XPlatPaySDK.JSONItemKind)
  @objc deinit
}
open class StringJSONItem : XPlatPaySDK.JSONItem {
  final public let value: Swift.String
  public init(_ value: Swift.String)
  override public init(_ kind: XPlatPaySDK.JSONItemKind)
  @objc deinit
}
open class BooleanJSONItem : XPlatPaySDK.JSONItem {
  final public let value: Swift.Bool
  public init(_ value: Swift.Bool)
  override public init(_ kind: XPlatPaySDK.JSONItemKind)
  @objc deinit
}
open class NullJSONItem : XPlatPaySDK.JSONItem {
  public init()
  override public init(_ kind: XPlatPaySDK.JSONItemKind)
  @objc deinit
}
open class MapJSONItem : XPlatPaySDK.JSONItem {
  public init(_ value: XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem> = YSMap<String, JSONItem>())
  @discardableResult
  open func asMap() -> XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem>
  @discardableResult
  open func put(_ key: Swift.String, _ value: XPlatPaySDK.JSONItem) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putIfPresent(_ key: Swift.String, _ value: XPlatPaySDK.JSONItem!) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putInt32(_ key: Swift.String, _ value: Swift.Int32) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putInt32IfPresent(_ key: Swift.String, _ value: Swift.Int32!) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putInt64(_ key: Swift.String, _ value: Swift.Int64) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putInt64IfPresent(_ key: Swift.String, _ value: Swift.Int64!) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putDouble(_ key: Swift.String, _ value: Swift.Double) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putDoubleIfPresent(_ key: Swift.String, _ value: Swift.Double!) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putBoolean(_ key: Swift.String, _ value: Swift.Bool) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putString(_ key: Swift.String, _ value: Swift.String) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putStringIfPresent(_ key: Swift.String, _ value: Swift.String!) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func putNull(_ key: Swift.String) -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func get(_ key: Swift.String) -> XPlatPaySDK.JSONItem!
  @discardableResult
  open func getArray(_ key: Swift.String) -> XPlatPaySDK.YSArray<XPlatPaySDK.JSONItem>!
  @discardableResult
  open func getArrayOrDefault(_ key: Swift.String, _ value: XPlatPaySDK.YSArray<XPlatPaySDK.JSONItem>) -> XPlatPaySDK.YSArray<XPlatPaySDK.JSONItem>
  @discardableResult
  open func getMap(_ key: Swift.String) -> XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem>!
  @discardableResult
  open func getMapOrDefault(_ key: Swift.String, _ value: XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem>) -> XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem>
  @discardableResult
  open func getInt32(_ key: Swift.String) -> Swift.Int32!
  @discardableResult
  open func getInt32OrDefault(_ key: Swift.String, _ value: Swift.Int32) -> Swift.Int32
  @discardableResult
  open func getInt64(_ key: Swift.String) -> Swift.Int64!
  @discardableResult
  open func getInt64OrDefault(_ key: Swift.String, _ value: Swift.Int64) -> Swift.Int64
  @discardableResult
  open func getDouble(_ key: Swift.String) -> Swift.Double!
  @discardableResult
  open func getDoubleOrDefault(_ key: Swift.String, _ value: Swift.Double) -> Swift.Double
  @discardableResult
  open func getBoolean(_ key: Swift.String) -> Swift.Bool!
  @discardableResult
  open func getBooleanOrDefault(_ key: Swift.String, _ value: Swift.Bool) -> Swift.Bool
  @discardableResult
  open func getString(_ key: Swift.String) -> Swift.String!
  @discardableResult
  open func getStringOrDefault(_ key: Swift.String, _ value: Swift.String) -> Swift.String
  @discardableResult
  open func tryGet(_ key: Swift.String) throws -> XPlatPaySDK.JSONItem
  @discardableResult
  open func tryGetInt32(_ key: Swift.String) throws -> Swift.Int32
  @discardableResult
  open func tryGetInt64(_ key: Swift.String) throws -> Swift.Int64
  @discardableResult
  open func tryGetDouble(_ key: Swift.String) throws -> Swift.Double
  @discardableResult
  open func tryGetString(_ key: Swift.String) throws -> Swift.String
  @discardableResult
  open func tryGetBoolean(_ key: Swift.String) throws -> Swift.Bool
  @discardableResult
  open func tryGetMap(_ key: Swift.String) throws -> XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem>
  @discardableResult
  open func tryGetArray(_ key: Swift.String) throws -> XPlatPaySDK.YSArray<XPlatPaySDK.JSONItem>
  @discardableResult
  open func isNull(_ key: Swift.String) -> Swift.Bool
  @discardableResult
  open func hasKey(_ key: Swift.String) -> Swift.Bool
  override public init(_ kind: XPlatPaySDK.JSONItemKind)
  @objc deinit
}
open class ArrayJSONItem : XPlatPaySDK.JSONItem {
  public init(_ value: XPlatPaySDK.YSArray<XPlatPaySDK.JSONItem> = YSArray())
  @discardableResult
  open func asArray() -> XPlatPaySDK.YSArray<XPlatPaySDK.JSONItem>
  @discardableResult
  open func getCount() -> Swift.Int32
  @discardableResult
  open func add(_ value: XPlatPaySDK.JSONItem) -> XPlatPaySDK.ArrayJSONItem
  @discardableResult
  open func addInt32(_ value: Swift.Int32) -> XPlatPaySDK.ArrayJSONItem
  @discardableResult
  open func addInt64(_ value: Swift.Int64) -> XPlatPaySDK.ArrayJSONItem
  @discardableResult
  open func addDouble(_ value: Swift.Double) -> XPlatPaySDK.ArrayJSONItem
  @discardableResult
  open func addBoolean(_ value: Swift.Bool) -> XPlatPaySDK.ArrayJSONItem
  @discardableResult
  open func addString(_ value: Swift.String) -> XPlatPaySDK.ArrayJSONItem
  @discardableResult
  open func addNull() -> XPlatPaySDK.ArrayJSONItem
  @discardableResult
  open func get(_ index: Swift.Int32) -> XPlatPaySDK.JSONItem
  @discardableResult
  open func getMap(_ index: Swift.Int32) -> XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem>
  @discardableResult
  open func getArray(_ index: Swift.Int32) -> XPlatPaySDK.YSArray<XPlatPaySDK.JSONItem>
  @discardableResult
  open func getInt32(_ index: Swift.Int32) -> Swift.Int32
  @discardableResult
  open func getInt64(_ index: Swift.Int32) -> Swift.Int64
  @discardableResult
  open func getDouble(_ index: Swift.Int32) -> Swift.Double
  @discardableResult
  open func getBoolean(_ index: Swift.Int32) -> Swift.Bool
  @discardableResult
  open func getString(_ index: Swift.Int32) -> Swift.String
  @discardableResult
  open func isNull(_ index: Swift.Int32) -> Swift.Bool
  override public init(_ kind: XPlatPaySDK.JSONItemKind)
  @objc deinit
}
@discardableResult
public func JSONItemToInt32(_ item: XPlatPaySDK.JSONItem) -> Swift.Int32!
@discardableResult
public func JSONItemToInt64(_ item: XPlatPaySDK.JSONItem) -> Swift.Int64!
@discardableResult
public func JSONItemToDouble(_ item: XPlatPaySDK.JSONItem) -> Swift.Double!
@discardableResult
public func JSONItemGetValue(_ item: XPlatPaySDK.JSONItem) -> Any!
@discardableResult
public func JSONItemGetValueDebugDescription(_ item: XPlatPaySDK.JSONItem) -> Swift.String
@discardableResult
public func JSONItemGetDebugDescription(_ item: XPlatPaySDK.JSONItem) -> Swift.String
@discardableResult
public func decodeJSONItem<T>(_ item: XPlatPaySDK.JSONItem, _ materializer: @escaping (XPlatPaySDK.JSONItem) throws -> T) -> XPlatPaySDK.Result<T>
@_hasMissingDesignatedInitializers open class JSONParsingError : XPlatPaySDK.YSError {
  @discardableResult
  open class func tryGetFailed(_ item: XPlatPaySDK.JSONItem, _ key: Swift.String) -> XPlatPaySDK.JSONParsingError
  @discardableResult
  open class func tryCastFailed(_ item: XPlatPaySDK.JSONItem, _ target: XPlatPaySDK.JSONItemKind) -> XPlatPaySDK.JSONParsingError
  @discardableResult
  open class func mapTryGetFailed(_ item: XPlatPaySDK.JSONItem, _ key: Swift.String, _ target: XPlatPaySDK.JSONItemKind) -> XPlatPaySDK.JSONParsingError
  @discardableResult
  open class func deserializationFailed(_ item: XPlatPaySDK.JSONItem, _ error: XPlatPaySDK.YSError) -> XPlatPaySDK.JSONParsingError
  @discardableResult
  open class func unknownDeserializationError(_ item: XPlatPaySDK.JSONItem, _ error: Any) -> XPlatPaySDK.JSONParsingError
  override public init(message: Swift.String, inner: Swift.Error?)
  @objc deinit
}
open class GetInstallRewardRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let deviceId: Swift.String
  public init(_ deviceId: Swift.String)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func params() -> XPlatPaySDK.NetworkParams
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  override public init()
  @objc deinit
}
open class IsReadyToPayRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let merchantOrigin: Swift.String
  final public let merchantId: Swift.String
  final public let existingPaymentMethodRequired: Swift.Bool
  final public let paymentMethods: XPlatPaySDK.YSArray<XPlatPaySDK.PaymentMethod>
  public init(_ merchantOrigin: Swift.String, _ merchantId: Swift.String, _ existingPaymentMethodRequired: Swift.Bool, _ paymentMethods: XPlatPaySDK.YSArray<XPlatPaySDK.PaymentMethod>)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func params() -> XPlatPaySDK.NetworkParams
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  override public init()
  @objc deinit
}
public enum FilterRulesService : Swift.String {
  case FilterList
  case CreateFilter
  case EditFilter
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FilterRulesClickEvent : Swift.String {
  case CreateFilter
  case FilterItem
  case DeleteFilter
  case EnableFilter
  case DisableFilter
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FilterRulesEditEvent : Swift.String {
  case EditSenderCondition
  case AddSenderCondition
  case EditSubjectCondition
  case AddSubjectCondition
  case FolderActionChooser
  case LabelActionChooser
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FilterRulesEditToggleEvent : Swift.String {
  case MarkReadActionToggle
  case DeleteActionToggle
  case ApplyToExistingToggle
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FilterRulesStatus : Swift.String {
  case Loading
  case Success
  case Error
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
open class BankLogosResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let logos: XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.BankLogo>
  public init(_ status: Swift.String, _ code: Swift.Int32, _ logos: XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.BankLogo>)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.BankLogosResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
open class MobileBackendNetworkInterceptor : XPlatPaySDK.NetworkInterceptor {
  public init(_ authorizationProvider: @escaping () -> XPlatPaySDK.XPromise<XPlatPaySDK.MobileBackendAuthorization?>, _ serviceToken: Swift.String)
  @discardableResult
  open class func create(_ oauthToken: Swift.String!, _ serviceToken: Swift.String, _ uid: Swift.String!) -> XPlatPaySDK.MobileBackendNetworkInterceptor
  @discardableResult
  open func intercept(_ originalRequest: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkRequest>
  @objc deinit
}
open class PayMobileAuthInterceptor : XPlatPaySDK.NetworkInterceptor {
  public init(_ oauthToken: Swift.String)
  @discardableResult
  open func intercept(_ originalRequest: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkRequest>
  @objc deinit
}
open class HttpRequest {
  final public let method: Swift.String
  final public let url: Swift.String
  final public let headers: XPlatPaySDK.YSMap<Swift.String, Swift.String>
  final public let body: XPlatPaySDK.ArrayBuffer
  public init(_ method: Swift.String, _ url: Swift.String, _ headers: XPlatPaySDK.YSMap<Swift.String, Swift.String>, _ body: XPlatPaySDK.ArrayBuffer)
  @objc deinit
}
open class HttpResponse {
  final public let code: Swift.Int32
  final public let headers: XPlatPaySDK.YSMap<Swift.String, Swift.String>
  final public let body: XPlatPaySDK.ArrayBuffer
  public init(_ code: Swift.Int32, _ headers: XPlatPaySDK.YSMap<Swift.String, Swift.String>, _ body: XPlatPaySDK.ArrayBuffer)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class HttpResponseBuilder {
  @discardableResult
  open func setCode(_ code: Swift.Int32) -> XPlatPaySDK.HttpResponseBuilder
  @discardableResult
  open func setHeaders(_ headers: XPlatPaySDK.YSMap<Swift.String, Swift.String>) -> XPlatPaySDK.HttpResponseBuilder
  @discardableResult
  open func setBody(_ body: XPlatPaySDK.ArrayBuffer) -> XPlatPaySDK.HttpResponseBuilder
  @discardableResult
  open func setBodyText(_ bodyText: Swift.String) -> XPlatPaySDK.HttpResponseBuilder
  @discardableResult
  open func build() -> XPlatPaySDK.HttpResponse
  @objc deinit
}
public protocol HttpRequestExecutor {
  @discardableResult
  func executeRequest(_ request: XPlatPaySDK.HttpRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.HttpResponse>
}
public protocol HttpRequestHandler {
  @discardableResult
  func handleRequest(_ request: XPlatPaySDK.HttpRequest) -> XPlatPaySDK.HttpResponse
}
open class CardArt {
  final public let pictures: XPlatPaySDK.YSMap<Swift.String, Swift.String>
  public init(_ pictures: XPlatPaySDK.YSMap<Swift.String, Swift.String>)
  @discardableResult
  open func original() -> Swift.String!
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.MapJSONItem) -> XPlatPaySDK.CardArt
  @objc deinit
}
extension CharacterSet {
  public static let urlQueryItemAllowed: Foundation.CharacterSet
}
open class PaymentSheet {
  final public let merchant: XPlatPaySDK.Merchant
  final public let order: XPlatPaySDK.Order
  final public let currencyCode: XPlatPaySDK.CurrencyCodes
  final public let countryCode: XPlatPaySDK.CountryCodes
  final public let paymentMethods: XPlatPaySDK.YSArray<XPlatPaySDK.PaymentMethod>
  public init(_ merchant: XPlatPaySDK.Merchant, _ order: XPlatPaySDK.Order, _ currencyCode: XPlatPaySDK.CurrencyCodes, _ countryCode: XPlatPaySDK.CountryCodes, _ paymentMethods: XPlatPaySDK.YSArray<XPlatPaySDK.PaymentMethod>)
  @discardableResult
  open func toJSON(_ addVersion: Swift.Bool) -> XPlatPaySDK.JSONItem
  @objc deinit
}
public typealias StoryId = Swift.String
open class NewCard {
  final public let cardNumber: Swift.String
  final public let expirationMonth: Swift.String
  final public let expirationYear: Swift.String
  final public let cvn: Swift.String
  final public let shouldBeStored: Swift.Bool
  final public let bank: XPlatPaySDK.BankName
  public init(_ cardNumber: Swift.String, _ expirationMonth: Swift.String, _ expirationYear: Swift.String, _ cvn: Swift.String, _ shouldBeStored: Swift.Bool, _ bank: XPlatPaySDK.BankName = BankName.UnknownBank)
  @objc deinit
}
public enum CurrencyCodes {
  case rub
  case usd
  public static func == (a: XPlatPaySDK.CurrencyCodes, b: XPlatPaySDK.CurrencyCodes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@discardableResult
public func currencyCodeFromString(_ value: Swift.String) -> XPlatPaySDK.CurrencyCodes!
@discardableResult
public func currencyCodeToString(_ value: XPlatPaySDK.CurrencyCodes) -> Swift.String
@_inheritsConvenienceInitializers open class DiehardRequest : XPlatPaySDK.BaseNetworkRequest {
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func params() -> XPlatPaySDK.NetworkParams
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @discardableResult
  open func wrappedParams() -> XPlatPaySDK.MapJSONItem
  override public init()
  @objc deinit
}
open class Order {
  final public let id: Swift.String
  final public let total: XPlatPaySDK.OrderTotal
  final public let items: XPlatPaySDK.YSArray<XPlatPaySDK.OrderItem>
  public init(_ id: Swift.String, _ total: XPlatPaySDK.OrderTotal, _ items: XPlatPaySDK.YSArray<XPlatPaySDK.OrderItem>)
  @discardableResult
  open func toMapJSONItem() -> XPlatPaySDK.MapJSONItem
  @objc deinit
}
public func cast<T, U>(_ array: XPlatPaySDK.YSArray<T>) -> XPlatPaySDK.YSArray<U>
public func castToAny<T>(_ value: T) -> Any
public func int64<T>(_ value: T) -> Swift.Int64 where T : Swift.SignedInteger
public func int32ToInt64(_ value: Swift.Int32) -> Swift.Int64
public func int32ToDouble(_ value: Swift.Int32) -> Swift.Double
public func int64ToInt32(_ value: Swift.Int64) -> Swift.Int32
public func int64ToDouble(_ value: Swift.Int64) -> Swift.Double
public func stringToInt32(_ value: Swift.String, _ radix: Swift.Int32 = 10) -> Swift.Int32?
public func stringToInt64(_ value: Swift.String, _ radix: Swift.Int32 = 10) -> Swift.Int64?
public func stringToDouble(_ value: Swift.String) -> Swift.Double?
public func int64ToString(_ value: Swift.Int64) -> Swift.String
public func int32ToString(_ value: Swift.Int32) -> Swift.String
public func doubleToString(_ value: Swift.Double) -> Swift.String
public func doubleToInt32(_ value: Swift.Double) -> Swift.Int32
public func doubleToInt64(_ value: Swift.Double) -> Swift.Int64
public func booleanToInt32(_ value: Swift.Bool) -> Swift.Int32
public func int32ToBoolean(_ value: Swift.Int32) -> Swift.Bool
public func floorDouble(_ value: Swift.Double) -> Swift.Double
public func randomDouble() -> Swift.Double
public func defaultValue()
public func undefinedToNull<T>(_ value: T?) -> T?
public func nullthrows<T>(_ value: T?) -> T
public func setToArray<T>(_ value: XPlatPaySDK.YSSet<T>) -> XPlatPaySDK.YSArray<T> where T : Swift.Hashable
public func arrayToSet<T>(_ value: XPlatPaySDK.YSArray<T>) -> XPlatPaySDK.YSSet<T> where T : Swift.Hashable
public func iterableToArray<T>(_ value: T) -> XPlatPaySDK.YSArray<T.Element> where T : Swift.Sequence
public func iterableToSet<T>(_ value: T) -> XPlatPaySDK.YSSet<T.Element> where T : Swift.Sequence, T.Element : Swift.Hashable
extension Int64 {
  public func toString() -> Swift.String
}
extension String {
  public func startsWith(_ other: Swift.String) -> Swift.Bool
  public func endsWith(_ other: Swift.String) -> Swift.Bool
  public func split(_ separator: Swift.String) -> XPlatPaySDK.YSArray<Swift.String>
  public func trim() -> Swift.String
  public var length: Swift.Int32 {
    get
  }
  public func slice(_ start: Swift.Int32 = 0, _ end: Swift.Int32? = nil) -> Swift.String
  public func substring(_ start: Swift.Int32 = 0, _ end: Swift.Int32? = nil) -> Swift.String
  public func substr(_ start: Swift.Int32 = 0, _ length: Swift.Int32? = nil) -> Swift.String
  public func search(_ regex: Swift.String) -> Swift.Int32
  public func match(_ regex: Swift.String) -> XPlatPaySDK.YSArray<Swift.String>?
  public func includes(_ s: Swift.String) -> Swift.Bool
  public func charCodeAt(_ i: Swift.Int32) -> Swift.Int32
  public func lastIndexOf(_ symbol: Swift.String) -> Swift.Int32
  public func indexOf(_ s: Swift.String, _ fromIndex: Swift.Int32 = 0) -> Swift.Int32
  public func `repeat`(_ count: Swift.Int32) -> Swift.String
  public func padStart(_ targetLength: Swift.Int32, _ padString: Swift.String = " ") -> Swift.String
}
@_hasMissingDesignatedInitializers public class TypeSupport {
  public static func isArray(_ value: Any) -> Swift.Bool
  public static func isMap(_ value: Any) -> Swift.Bool
  public static func isString(_ value: Any) -> Swift.Bool
  public static func asString(_ value: Any) -> Swift.String!
  public static func tryCastAsString(_ value: Any) throws -> Swift.String!
  public static func isBoolean(_ value: Any) -> Swift.Bool
  public static func asBoolean(_ value: Any) -> Swift.Bool!
  public static func tryCastAsBoolean(_ value: Any) throws -> Swift.Bool!
  public static func isInt32(_ value: Any) -> Swift.Bool
  public static func asInt32(_ value: Any) -> Swift.Int32!
  public static func tryCastAsInt32(_ value: Any) throws -> Swift.Int32!
  public static func isInt64(_ value: Any) -> Swift.Bool
  public static func asInt64(_ value: Any) -> Swift.Int64!
  public static func tryCastAsInt64(_ value: Any) throws -> Swift.Int64!
  public static func isDouble(_ value: Any) -> Swift.Bool
  public static func asDouble(_ value: Any) -> Swift.Double!
  public static func tryCastAsDouble(_ value: Any) throws -> Swift.Double!
  @objc deinit
}
open class YSError : Foundation.LocalizedError {
  final public let message: Swift.String
  final public let inner: Swift.Error?
  public init(_ message: Swift.String)
  public init(message: Swift.String, inner: Swift.Error?)
  public var errorDescription: Swift.String? {
    get
  }
  @objc deinit
}
public protocol Parcelable {
}
extension YSMap where K == Swift.String {
  final public func parse() -> [Swift.String : Any]
}
extension YSArray {
  final public func parse() -> [Any]
}
public protocol ChallengeCallback {
  @discardableResult
  func show3ds(_ uri: XPlatPaySDK.Uri) throws
  func hide3ds(_ success: Swift.Bool)
}
open class CheckPaymentPollingConfig {
  final public let timeoutMs: Swift.Int64!
  final public let intervalMs: Swift.Int64
  public init(_ timeoutMs: Swift.Int64!, _ intervalMs: Swift.Int64)
  @discardableResult
  open class func defaultConfig() -> XPlatPaySDK.CheckPaymentPollingConfig
  @objc deinit
}
@discardableResult
public func resultExecuteSequentially<T>(_ resultFactories: XPlatPaySDK.YSArray<() -> XPlatPaySDK.Result<T>>) -> XPlatPaySDK.Result<XPlatPaySDK.YSArray<T>>
@discardableResult
public func toPromise<T>(_ result: XPlatPaySDK.Result<T>) -> XPlatPaySDK.XPromise<T>
open class MobileBackendErrorResponse {
  final public let status: Swift.String
  final public let code: Swift.Int32
  final public let reqID: Swift.String
  final public let message: Swift.String!
  public init(_ status: Swift.String, _ code: Swift.Int32, _ reqID: Swift.String, _ message: Swift.String!)
  @discardableResult
  open class func fromJsonItem(_ item: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.MobileBackendErrorResponse>
  @objc deinit
}
open class CardValidationError {
  public static let `default`: XPlatPaySDK.CardValidationError
  final public let customErrorMessage: Swift.String!
  public init(_ customErrorMessage: Swift.String!)
  @discardableResult
  open class func custom(_ customErrorMessage: Swift.String!) -> XPlatPaySDK.CardValidationError
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CardField {
  @discardableResult
  open class func expirationDate(_ month: Swift.String, _ year: Swift.String) -> XPlatPaySDK.CardExpirationDateField
  @discardableResult
  open class func number(_ value: Swift.String) -> XPlatPaySDK.CardNumberField
  @discardableResult
  open class func cvn(_ value: Swift.String) -> XPlatPaySDK.CardCvnField
  @discardableResult
  open class func email(_ value: Swift.String) -> XPlatPaySDK.CardEmailField
  @discardableResult
  open class func phone(_ value: Swift.String) -> XPlatPaySDK.CardPhoneField
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CardNumberField : XPlatPaySDK.CardField {
  final public let value: Swift.String
  public init(_ value: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CardExpirationDateField : XPlatPaySDK.CardField {
  final public let month: Swift.String
  final public let year: Swift.String
  public init(_ month: Swift.String, _ year: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CardCvnField : XPlatPaySDK.CardField {
  final public let value: Swift.String
  public init(_ value: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CardEmailField : XPlatPaySDK.CardField {
  final public let value: Swift.String
  public init(_ value: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CardPhoneField : XPlatPaySDK.CardField {
  final public let value: Swift.String
  public init(_ value: Swift.String)
  @objc deinit
}
open class CardFieldValidator<T> where T : XPlatPaySDK.CardField {
  public init()
  @discardableResult
  open func validate(_ field: T) -> XPlatPaySDK.CardValidationError!
  @discardableResult
  open func composite() -> XPlatPaySDK.CompositeCardFieldValidator<T>
  @objc deinit
}
@_inheritsConvenienceInitializers open class CompositeCardFieldValidator<T> : XPlatPaySDK.CardFieldValidator<T> where T : XPlatPaySDK.CardField {
  override public init()
  @discardableResult
  open func addValidator(_ validator: XPlatPaySDK.CardFieldValidator<T>) -> XPlatPaySDK.CompositeCardFieldValidator<T>
  @discardableResult
  override open func validate(_ field: T) -> XPlatPaySDK.CardValidationError!
  @objc deinit
}
@_inheritsConvenienceInitializers open class SuccessCardFieldValidator<T> : XPlatPaySDK.CardFieldValidator<T> where T : XPlatPaySDK.CardField {
  override public init()
  @discardableResult
  override open func validate(_ field: T) -> XPlatPaySDK.CardValidationError!
  @objc deinit
}
open class FailureCardFieldValidator<T> : XPlatPaySDK.CardFieldValidator<T> where T : XPlatPaySDK.CardField {
  public init(_ error: XPlatPaySDK.CardValidationError)
  @discardableResult
  override open func validate(_ field: T) -> XPlatPaySDK.CardValidationError!
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DefaultCardNumberValidator : XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardNumberField> {
  override public init()
  @discardableResult
  override open func validate(_ field: XPlatPaySDK.CardNumberField) -> XPlatPaySDK.CardValidationError!
  @objc deinit
}
open class LengthCardNumberValidator : XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardNumberField> {
  public init(_ lengths: XPlatPaySDK.YSArray<Swift.Int32>)
  @discardableResult
  open class func validateCardLength(_ cardNumber: Swift.String) -> Swift.Bool
  @discardableResult
  open class func withCardNetwork(_ cardNetwork: XPlatPaySDK.CardNetworks!) -> XPlatPaySDK.LengthCardNumberValidator
  @discardableResult
  override open func validate(_ field: XPlatPaySDK.CardNumberField) -> XPlatPaySDK.CardValidationError!
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class LuhnCardNumberValidator : XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardNumberField> {
  override public init()
  @discardableResult
  override open func validate(_ field: XPlatPaySDK.CardNumberField) -> XPlatPaySDK.CardValidationError!
  @objc deinit
}
open class DefaultCardExpirationDateValidator : XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardExpirationDateField> {
  public init(_ today: XPlatPaySDK.YSDate = YSDate())
  @discardableResult
  override open func validate(_ field: XPlatPaySDK.CardExpirationDateField) -> XPlatPaySDK.CardValidationError!
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DefaultCardCvnValidator : XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardCvnField> {
  override public init()
  @discardableResult
  override open func validate(_ field: XPlatPaySDK.CardCvnField) -> XPlatPaySDK.CardValidationError!
  @objc deinit
}
open class LengthCardCvnValidator : XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardCvnField> {
  public init(_ length: Swift.Int32)
  @discardableResult
  open class func withCardNetwork(_ cardNetwork: XPlatPaySDK.CardNetworks!) -> XPlatPaySDK.LengthCardCvnValidator
  @discardableResult
  override open func validate(_ field: XPlatPaySDK.CardCvnField) -> XPlatPaySDK.CardValidationError!
  override public init()
  @objc deinit
}
open class DefaultCardEmailValidator : XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardEmailField> {
  public init(_ callback: @escaping (Swift.String) -> XPlatPaySDK.CardValidationError?)
  @discardableResult
  override open func validate(_ field: XPlatPaySDK.CardEmailField) -> XPlatPaySDK.CardValidationError!
  override public init()
  @objc deinit
}
open class DefaultCardPhoneValidator : XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardPhoneField> {
  public init(_ callback: @escaping (Swift.String) -> XPlatPaySDK.CardValidationError?)
  @discardableResult
  override open func validate(_ field: XPlatPaySDK.CardPhoneField) -> XPlatPaySDK.CardValidationError!
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CardMinExpirationDateValidator : XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardExpirationDateField> {
  @discardableResult
  override open func validate(_ field: XPlatPaySDK.CardExpirationDateField) -> XPlatPaySDK.CardValidationError!
  @discardableResult
  open class func create(_ minExpirationYear: Swift.Int32, _ minExpirationMonth: Swift.Int32, _ validationError: XPlatPaySDK.CardValidationError) throws -> XPlatPaySDK.CardMinExpirationDateValidator
  override public init()
  @objc deinit
}
open class CardBinRangeValidator : XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardNumberField> {
  public static let binLength: Swift.Int32
  public init(_ ranges: XPlatPaySDK.YSArray<XPlatPaySDK.CardBinRange>, _ validationError: XPlatPaySDK.CardValidationError)
  @discardableResult
  override open func validate(_ field: XPlatPaySDK.CardNumberField) -> XPlatPaySDK.CardValidationError!
  override public init()
  @objc deinit
}
open class CardBinRangeBuilder {
  public init()
  @discardableResult
  open func addRange(_ from: Swift.String, _ to: Swift.String) throws -> XPlatPaySDK.CardBinRangeBuilder
  @discardableResult
  open func build() -> XPlatPaySDK.YSArray<XPlatPaySDK.CardBinRange>
  @objc deinit
}
open class CardBinRange {
  final public let from: Swift.Int32
  final public let to: Swift.Int32
  public init(_ from: Swift.Int32, _ to: Swift.Int32)
  @objc deinit
}
open class CardValidationException : XPlatPaySDK.YSError {
  override public init(_ message: Swift.String)
  override public init(message: Swift.String, inner: Swift.Error?)
  @objc deinit
}
open class CardValidators {
  final public let numberValidator: XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardNumberField>
  final public let expirationDateValidator: XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardExpirationDateField>
  final public let cvnValidator: XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardCvnField>
  final public let emailValidator: XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardEmailField>
  final public let phoneValidator: XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardPhoneField>
  public init(_ numberValidator: XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardNumberField>, _ expirationDateValidator: XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardExpirationDateField>, _ cvnValidator: XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardCvnField>, _ emailValidator: XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardEmailField>, _ phoneValidator: XPlatPaySDK.CardFieldValidator<XPlatPaySDK.CardPhoneField>)
  @objc deinit
}
public enum LogEventType {
  case info
  case warning
  case error
  public static func == (a: XPlatPaySDK.LogEventType, b: XPlatPaySDK.LogEventType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PushTokenType {
  case firebase
  case huawei
  public static func == (a: XPlatPaySDK.PushTokenType, b: XPlatPaySDK.PushTokenType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class ValueMapBuilder {
  @discardableResult
  open class func userEvent() -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open class func systemEvent() -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open class func modelSyncEvent() -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open class func customEvent(_ source: Swift.String, _ map: XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem> = YSMap<String, JSONItem>()) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open class func __parse(_ map: XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem>) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func __plus(_ more: XPlatPaySDK.ValueMapBuilder) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func setEventName(_ name: Swift.String) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addEventusId(_ eventusId: Swift.Int64) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addOriginEventusId(_ eventusId: Swift.Int64) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addStartEvent() -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addSwitchEvent(_ state: Swift.Bool) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addTimespan(_ value: Swift.Int64) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addOrder(_ order: Swift.Int32) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addCount(_ count: Swift.Int32) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func setHasPin(_ hasPin: Swift.Bool) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addRepliesNumber(_ repliesNumber: Swift.Int32!) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addRepliesNumbers(_ repliesNumbers: XPlatPaySDK.YSArray<Swift.Int32>!) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addLength(_ length: Swift.Int32!) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addUid(_ uid: Swift.Int64!) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addMid(_ mid: Swift.Int64!) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addMids(_ mids: XPlatPaySDK.YSArray<Swift.Int64>!) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addFid(_ fid: Swift.Int64) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addTid(_ tid: Swift.Int64) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addStoryId(_ storyId: XPlatPaySDK.StoryId) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addBlanksNumber(_ blanksNumbers: Swift.Int32) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addSharedState(_ shared: Swift.Bool) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addService(_ service: Swift.String) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addSource(_ source: Swift.String) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addContactField(_ contactField: XPlatPaySDK.ContactField) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addStatus(_ status: Swift.String) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addFields(_ fields: XPlatPaySDK.YSArray<Swift.String>!) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addMessages(_ messages: XPlatPaySDK.YSArray<XPlatPaySDK.MessageDTO>!) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addDebug() -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addError() -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addReason(_ reason: Swift.String!) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addSuggestType(_ suggestType: Swift.String) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addSuggestValue(_ suggestValue: Swift.String) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addSuggestPosition(_ suggestPosition: Swift.Int32) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addEvent(_ event: Swift.String) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addSaveDraft(_ saveDraft: Swift.Bool) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addExtension(_ extension: Swift.String) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func addAttachOpenMethod(_ method: XPlatPaySDK.AttachOpenMethod) -> XPlatPaySDK.ValueMapBuilder
  @discardableResult
  open func build() -> XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.JSONItem>
  @objc deinit
}
open class DiehardResponse {
  final public let status: Swift.String
  final public let statusCode: Swift.String!
  final public let statusDescription: Swift.String!
  public init(_ status: Swift.String, _ statusCode: Swift.String!, _ statusDescription: Swift.String!)
  @discardableResult
  open class func baseFromJsonItem(_ item: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.DiehardResponse>
  @objc deinit
}
@_inheritsConvenienceInitializers open class GetAllowedBinsRequest : XPlatPaySDK.BaseNetworkRequest {
  override public init()
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @objc deinit
}
@_inheritsConvenienceInitializers open class IsAuthorizedRequest : XPlatPaySDK.BaseNetworkRequest {
  override public init()
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @objc deinit
}
@discardableResult
public func checkLuhn(_ digits: Swift.String) -> Swift.Bool
public protocol Logger {
  func info(_ message: Swift.String)
  func warn(_ message: Swift.String)
  func error(_ message: Swift.String)
}
@_hasMissingDesignatedInitializers open class Log {
  open class func registerLogger(_ name: Swift.String, _ value: XPlatPaySDK.Logger)
  open class func registerDefaultLogger(_ logger: XPlatPaySDK.Logger)
  @discardableResult
  open class func getDefaultLogger() -> XPlatPaySDK.Logger!
  open class func info(_ message: Swift.String)
  open class func warn(_ message: Swift.String)
  open class func error(_ message: Swift.String)
  open class func reset()
  @objc deinit
}
@_inheritsConvenienceInitializers open class UserCardsRequest : XPlatPaySDK.BaseNetworkRequest {
  override public init()
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @objc deinit
}
open class IsReadyToPayResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let isReadyToPay: Swift.Bool
  public init(_ status: Swift.String, _ code: Swift.Int32, _ isReadyToPay: Swift.Bool)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.IsReadyToPayResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
open class Merchant {
  final public let id: Swift.String
  final public let name: Swift.String
  public init(_ id: Swift.String, _ name: Swift.String)
  @discardableResult
  open func toMapJSONItem() -> XPlatPaySDK.MapJSONItem
  @objc deinit
}
open class EncryptedAppIdRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let appId: Swift.String
  public init(_ appId: Swift.String)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func params() -> XPlatPaySDK.NetworkParams
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class EventAttribute {
  public static let EventType: Swift.String
  public static let EventSource: Swift.String
  public static let EventName: Swift.String
  public static let StartEvent: Swift.String
  public static let Timespan: Swift.String
  public static let Order: Swift.String
  public static let Count: Swift.String
  public static let RepliesNumber: Swift.String
  public static let RepliesNumbers: Swift.String
  public static let Length: Swift.String
  public static let Uid: Swift.String
  public static let Mid: Swift.String
  public static let Mids: Swift.String
  public static let Fid: Swift.String
  public static let Tid: Swift.String
  public static let StoryId: Swift.String
  public static let BlanksNumber: Swift.String
  public static let Shared: Swift.String
  public static let Service: Swift.String
  public static let Source: Swift.String
  public static let Field: Swift.String
  public static let Status: Swift.String
  public static let Switch: Swift.String
  public static let HasPin: Swift.String
  public static let Fields: Swift.String
  public static let Messages: Swift.String
  public static let Debug: Swift.String
  public static let Error: Swift.String
  public static let Reason: Swift.String
  public static let SuggestType: Swift.String
  public static let SuggestValue: Swift.String
  public static let SuggestPosition: Swift.String
  public static let Event: Swift.String
  public static let SaveDraft: Swift.String
  public static let Extension: Swift.String
  public static let AttachOpenMethod: Swift.String
  @objc deinit
}
open class NewCardBindingRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let oauthToken: Swift.String
  final public let serviceToken: Swift.String
  final public let hashAlgorithm: Swift.String
  final public let cardDataEncrypted: Swift.String
  final public let regionId: Swift.Int32
  public init(_ oauthToken: Swift.String, _ serviceToken: Swift.String, _ hashAlgorithm: Swift.String, _ cardDataEncrypted: Swift.String, _ regionId: Swift.Int32)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func headersExtra() -> XPlatPaySDK.NetworkHeadersExtra
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @discardableResult
  override open func params() -> XPlatPaySDK.MapJSONItem
  override public init()
  @objc deinit
}
public enum PlatformType : Swift.String {
  case android
  case electron
  case ios
  case touch
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@discardableResult
public func platformToClient(_ platform: XPlatPaySDK.Platform) -> Swift.String
public protocol Platform {
  var type: XPlatPaySDK.PlatformType { get }
  var isTablet: Swift.Bool { get }
}
open class ResponseProcessor {
  public init(_ serializer: XPlatPaySDK.JSONSerializer)
  @discardableResult
  open func extractResponse<T>(_ requestTag: Swift.String, _ response: XPlatPaySDK.NetworkResponse, _ parse: @escaping (XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<T>) -> XPlatPaySDK.XPromise<T>
  @discardableResult
  open func extractUnvalidatedResponse<T>(_ requestTag: Swift.String, _ response: XPlatPaySDK.NetworkResponse, _ parse: @escaping (XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<T>) -> XPlatPaySDK.XPromise<T>
  @objc deinit
}
open class ClientInfo {
  final public let platform: XPlatPaySDK.ClientPlatform
  final public let version: Swift.String
  public init(_ platform: XPlatPaySDK.ClientPlatform, _ version: Swift.String)
  @objc deinit
}
public enum ClientPlatform : Swift.String {
  case android
  case ios
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
open class NewCardBindingResponse {
  final public let bindingId: Swift.String
  public init(_ bindingId: Swift.String)
  @discardableResult
  open class func fromJsonItem(_ item: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.NewCardBindingResponse>
  @objc deinit
}
@_inheritsConvenienceInitializers public class FileSystemError : XPlatPaySDK.YSError {
  public static func notExists(atPath path: Swift.String) -> XPlatPaySDK.YSError
  public static func alreadyExists(atPath path: Swift.String) -> XPlatPaySDK.YSError
  public static func failedToRead(atPath path: Swift.String) -> XPlatPaySDK.YSError
  public static func failedToParse(contents: Swift.String) -> XPlatPaySDK.YSError
  public static func unexpectedError(path: Swift.String, inner: Swift.Error? = nil) -> XPlatPaySDK.YSError
  override public init(_ message: Swift.String)
  override public init(message: Swift.String, inner: Swift.Error?)
  @objc deinit
}
open class OrderTotal {
  final public let amount: XPlatPaySDK.Price
  final public let label: Swift.String!
  public init(_ amount: XPlatPaySDK.Price, _ label: Swift.String!)
  @discardableResult
  open func toMapJSONItem() -> XPlatPaySDK.MapJSONItem
  @objc deinit
}
@discardableResult
public func executeSequentially<T>(_ promiseFactories: XPlatPaySDK.YSArray<() -> XPlatPaySDK.XPromise<T>>) -> XPlatPaySDK.XPromise<XPlatPaySDK.YSArray<T>>
public typealias Count = Swift.String
@_inheritsConvenienceInitializers open class BankLogosRequest : XPlatPaySDK.BaseNetworkRequest {
  override public init()
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @objc deinit
}
open class CardNetworkNumberPattern {
  final public let intervalStart: Swift.String
  final public let intervalEnd: Swift.String!
  public init(_ intervalStart: Swift.String, _ intervalEnd: Swift.String!)
  @objc deinit
}
open class CardType {
  public static let SPACERS_4_6: XPlatPaySDK.YSArray<Swift.Int32>
  public static let REGULAR_SPACERS: XPlatPaySDK.YSArray<Swift.Int32>
  public static let UNKNOWN: XPlatPaySDK.CardType
  final public let cardNetwork: XPlatPaySDK.CardNetworks!
  final public let patterns: XPlatPaySDK.YSArray<XPlatPaySDK.CardNetworkNumberPattern>
  final public let validLengths: XPlatPaySDK.YSArray<Swift.Int32>
  final public let cvvLength: Swift.Int32
  final public let spacers: XPlatPaySDK.YSArray<Swift.Int32>
  public init(_ cardNetwork: XPlatPaySDK.CardNetworks!, _ patterns: XPlatPaySDK.YSArray<XPlatPaySDK.CardNetworkNumberPattern>, _ validLengths: XPlatPaySDK.YSArray<Swift.Int32>, _ cvvLength: Swift.Int32, _ spacers: XPlatPaySDK.YSArray<Swift.Int32>)
  @discardableResult
  open class func getAllCardTypes() -> XPlatPaySDK.YSArray<XPlatPaySDK.CardType>
  @discardableResult
  open class func cardTypeFromCardNumber(_ numStr: Swift.String) -> XPlatPaySDK.CardType
  @discardableResult
  open class func cardTypeByNetwork(_ cardNetwork: XPlatPaySDK.CardNetworks!) -> XPlatPaySDK.CardType
  @objc deinit
}
open class CardNetworkChecker {
  public static var instance: XPlatPaySDK.CardNetworkChecker
  public init()
  @discardableResult
  open func lookup(_ numStr: Swift.String) -> XPlatPaySDK.CardNetworks!
  @objc deinit
}
@discardableResult
public func applySpacers(_ str: Swift.String, _ spacers: XPlatPaySDK.YSArray<Swift.Int32>) -> Swift.String
public protocol CustomNetworkProvider {
  @discardableResult
  func provideNetwork(_ baseUrl: Swift.String) -> XPlatPaySDK.Network
}
open class JSONSerializerWrapper {
  public init(_ serializer: XPlatPaySDK.JSONSerializer)
  @discardableResult
  open func serialize(_ item: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<Swift.String>
  @discardableResult
  open func deserializeJSONItem(_ contents: Swift.String) -> XPlatPaySDK.Result<XPlatPaySDK.JSONItem>
  @objc deinit
}
open class CheckPaymentRequest : XPlatPaySDK.DiehardRequest {
  final public let purchaseToken: Swift.String
  public init(_ purchaseToken: Swift.String)
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func wrappedParams() -> XPlatPaySDK.MapJSONItem
  override public init()
  @objc deinit
}
open class GetInstallRewardResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let rewardAmount: Swift.String
  public init(_ status: Swift.String, _ code: Swift.Int32, _ rewardAmount: Swift.String)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.GetInstallRewardResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
open class DiehardBackendApiError : XPlatPaySDK.NetworkServiceError {
  final public let response: XPlatPaySDK.DiehardStatus3dsResponse
  public init(_ response: XPlatPaySDK.DiehardStatus3dsResponse)
  @discardableResult
  override open func convertToExternalError() -> XPlatPaySDK.ExternalError
  override public init(_ kind: XPlatPaySDK.ExternalErrorKind, _ trigger: XPlatPaySDK.ExternalErrorTrigger, _ statusCode: Swift.Int32!, _ message: Swift.String)
  @objc deinit
}
open class DiehardBackendApi {
  public init(_ networkService: XPlatPaySDK.NetworkService)
  @discardableResult
  open class func create(_ network: XPlatPaySDK.Network, _ serializer: XPlatPaySDK.JSONSerializer, _ passportToken: Swift.String!) -> XPlatPaySDK.DiehardBackendApi
  @discardableResult
  open func checkBindingPayment(_ request: XPlatPaySDK.CheckPaymentRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.CheckBindingPaymentResponse>
  @discardableResult
  open func newCardBinding(_ request: XPlatPaySDK.NewCardBindingRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NewCardBindingResponse>
  @discardableResult
  open func encryptedCard(_ request: XPlatPaySDK.EncryptedCardRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.EncryptedCardResponse>
  @objc deinit
}
@_hasMissingDesignatedInitializers open class DiehardBackendErrorProcessor : XPlatPaySDK.NetworkServiceErrorProcessor {
  @discardableResult
  open func extractError(_ errorBody: XPlatPaySDK.JSONItem) -> XPlatPaySDK.NetworkServiceError!
  @discardableResult
  open func validateResponse(_ body: XPlatPaySDK.JSONItem) -> XPlatPaySDK.NetworkServiceError!
  @discardableResult
  open func wrapError(_ error: XPlatPaySDK.NetworkServiceError) -> XPlatPaySDK.NetworkServiceError
  @objc deinit
}
open class PayCheckoutResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let paymentToken: Swift.String
  final public let paymentMethodType: XPlatPaySDK.PaymentMethodTypes
  final public let paymentMethodCardLastDigits: Swift.String!
  final public let paymentCardNetwork: XPlatPaySDK.CardNetworks!
  public init(_ status: Swift.String, _ code: Swift.Int32, _ paymentToken: Swift.String, _ paymentMethodType: XPlatPaySDK.PaymentMethodTypes, _ paymentMethodCardLastDigits: Swift.String!, _ paymentCardNetwork: XPlatPaySDK.CardNetworks!)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.PayCheckoutResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
public enum ExclusiveEmailService : Swift.String {
  case Promo
  case Confirmation
  case Search
  case Delete
  case ChangeLogin
  case Status
  case Success
  case More
  case SuccessNotification
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ExclusiveEmailClickEvent : Swift.String {
  case PickUp
  case WantThis
  case SubscriptionInfo
  case Connect
  case ChooseSubscriptionAndConnect
  case Terms
  case Delete
  case Cancel
  case More
  case Detail
  case CheckMail
  case Close
  case Change
  case Done
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ExclusiveEmailStatus : Swift.String {
  case Pending
  case Registered
  case Deleted
  case EmailNotAvailable
  case SubscriptionExpired
  case InfoNotAvailable
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public func JSONItemFromAny(_ value: Any?) -> XPlatPaySDK.JSONItem?
extension JSONItem {
  public func toAny() -> Any?
}
public func isBoolean(_ value: Foundation.NSNumber) -> Swift.Bool
public func isInteger(_ value: Foundation.NSNumber) -> Swift.Bool
extension JSONItem {
  public var debugDescription: Swift.String {
    get
  }
}
open class PassportHeaderInterceptor : XPlatPaySDK.NetworkInterceptor {
  public init(_ token: Swift.String!)
  @discardableResult
  open func intercept(_ originalRequest: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkRequest>
  @objc deinit
}
open class InitInstallRewardResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let rewardAmount: Swift.String
  public init(_ status: Swift.String, _ code: Swift.Int32, _ rewardAmount: Swift.String)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.InitInstallRewardResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
final public class ArrayBuffer {
  final public let byteArray: Foundation.Data
  public init(byteArray: Foundation.Data)
  @objc deinit
}
public enum ArrayBufferHelpers {
  public static func arrayBufferFromString(_ string: Swift.String, _ encoding: XPlatPaySDK.Encoding) -> XPlatPaySDK.Result<XPlatPaySDK.ArrayBuffer>
  public static func arrayBufferToString(_ arrayBuffer: XPlatPaySDK.ArrayBuffer, _ encoding: XPlatPaySDK.Encoding) -> XPlatPaySDK.Result<Swift.String>
}
open class OrderItem {
  final public let label: Swift.String
  final public let amount: XPlatPaySDK.Price
  final public let type: XPlatPaySDK.OrderItemTypes!
  final public let quantity: XPlatPaySDK.OrderItemQuantity!
  public init(_ label: Swift.String, _ amount: XPlatPaySDK.Price, _ type: XPlatPaySDK.OrderItemTypes!, _ quantity: XPlatPaySDK.OrderItemQuantity!)
  @discardableResult
  open func toMapJSONItem() -> XPlatPaySDK.MapJSONItem
  @objc deinit
}
public protocol EventReporter {
  func report(_ event: XPlatPaySDK.LoggingEvent)
}
@_hasMissingDesignatedInitializers open class EmptyEventReporter : XPlatPaySDK.EventReporter {
  open func report(_ _event: XPlatPaySDK.LoggingEvent)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class GenericEventNames {
  public static let INFO: Swift.String
  public static let WARN: Swift.String
  public static let ERROR: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers open class SpecificEventNames {
  public static let PAY_CHECKOUT: Swift.String
  public static let SET_DEFAULT_CARD: Swift.String
  public static let VALIDATE: Swift.String
  public static let USER_CARDS: Swift.String
  public static let IS_READY_TO_PAY: Swift.String
  public static let LOAD_USER_PROFILE: Swift.String
  public static let SYNC_USER_CARD: Swift.String
  public static let ENCRYPTED_APP_ID: Swift.String
  public static let ENCRYPTED_CARD: Swift.String
  public static let BANK_LOGOS: Swift.String
  public static let BIND_NEW_CARD: Swift.String
  public static let BIND_NEW_CARD_POLLING: Swift.String
  public static let BIND_NEW_CARD_VERIFY_COMPLETE: Swift.String
  public static let BIND_NEW_CARD_VERIFY_START: Swift.String
  public static let BIND_NEW_CARD_BINDING_COMPLETE: Swift.String
  public static let BIND_NEW_CARD_BINDING_STARTED: Swift.String
  public static let GET_ALLOWED_BINS: Swift.String
  public static let REGISTER_PUSH_TOKEN: Swift.String
  public static let IS_AUTHORIZED: Swift.String
  public static let INIT_INSTALL_REWARD: Swift.String
  public static let GET_INSTALL_REWARD: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers open class EventParams {
  public static let IS_DEBUG: Swift.String
  public static let MESSAGE: Swift.String
  public static let PAY_VERSION: Swift.String
  public static let HOST_APP: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers open class YandexPayAnalyticsEvents {
  @discardableResult
  open func bindNewCardPollingStatus() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func bindNewCardVerifyCompleted() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func bindNewCardVerify() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func bindNewCardBindingCompleted() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func bindNewCardBinding() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func bindNewCard() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func payCheckout() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func setDefaultCard() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func validate() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func userCards() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func isReadyToPay() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func loadUserProfile() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func syncUserCard() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func encryptedAppId() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func encryptedCard() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func bankLogos() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func getAllowedBins() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func registerPushToken() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func isAuthorized() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func initInstallReward() -> XPlatPaySDK.EventusEvent
  @discardableResult
  open func getInstallReward() -> XPlatPaySDK.EventusEvent
  @objc deinit
}
@_hasMissingDesignatedInitializers open class YandexPayAnalyticsEnvironment {
  @discardableResult
  open func getAdditionalParams() -> XPlatPaySDK.YSMap<Swift.String, Any>
  @discardableResult
  open func reset() -> XPlatPaySDK.YandexPayAnalyticsEnvironment
  @objc deinit
}
@_hasMissingDesignatedInitializers open class YandexPayAnalytics {
  public static let environment: XPlatPaySDK.YandexPayAnalyticsEnvironment
  public static let events: XPlatPaySDK.YandexPayAnalyticsEvents
  @discardableResult
  open class func buildEvent(_ eventName: Swift.String, _ params: XPlatPaySDK.MapJSONItem = MapJSONItem()) -> XPlatPaySDK.EventusEvent
  @objc deinit
}
@_inheritsConvenienceInitializers open class ValidateResponse : XPlatPaySDK.BaseNetworkResponse {
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.ValidateResponse>
  @objc deinit
}
open class OrderItemQuantity {
  final public let count: XPlatPaySDK.Count
  final public let label: Swift.String!
  public init(_ count: XPlatPaySDK.Count, _ label: Swift.String!)
  @discardableResult
  open func toMapJSONItem() -> XPlatPaySDK.MapJSONItem
  @objc deinit
}
@_inheritsConvenienceInitializers open class SetDefaultCardResponse : XPlatPaySDK.BaseNetworkResponse {
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.SetDefaultCardResponse>
  @objc deinit
}
@_hasMissingDesignatedInitializers open class EventusRegistry {
  public static var version: Swift.Int32
  public static var timeProvider: XPlatPaySDK.TimeProvider
  public static var eventIdProvider: XPlatPaySDK.EventIdProvider
  open class func setEventReporter(_ reporter: XPlatPaySDK.EventReporter)
  @discardableResult
  open class func eventReporter() -> XPlatPaySDK.EventReporter
  open class func setAggregatorProvider(_ provider: XPlatPaySDK.AggregatorProvider)
  @discardableResult
  open class func aggregatorProvider() -> XPlatPaySDK.AggregatorProvider
  @objc deinit
}
public typealias Price = Swift.String
open class CheckPaymentResponse : XPlatPaySDK.DiehardStatus3dsResponse {
  final public let redirectURL: Swift.String!
  final public let paymentFormUrl: Swift.String!
  public init(_ status: Swift.String, _ statusCode: Swift.String!, _ statusDescription: Swift.String!, _ redirectURL: Swift.String!, _ paymentFormUrl: Swift.String!, _ status3ds: Swift.String!)
  @discardableResult
  open class func fromJsonItem(_ item: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.CheckPaymentResponse>
  override public init(_ status: Swift.String, _ statusCode: Swift.String!, _ statusDescription: Swift.String!, _ status3ds: Swift.String!)
  @objc deinit
}
public enum CardBindingServiceErrorCode {
  case emptyOAuthToken
  case undefinedStatus
  case challengeInvalidRedirectUrl
  case challengeHandlingError
  case cancelled
  public static func == (a: XPlatPaySDK.CardBindingServiceErrorCode, b: XPlatPaySDK.CardBindingServiceErrorCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class CardBindingServiceError : XPlatPaySDK.YSError {
  final public let code: XPlatPaySDK.CardBindingServiceErrorCode
  public init(_ message: Swift.String, _ code: XPlatPaySDK.CardBindingServiceErrorCode)
  @discardableResult
  open class func emptyOAuthToken() -> XPlatPaySDK.CardBindingServiceError
  @discardableResult
  open class func cancelled() -> XPlatPaySDK.CardBindingServiceError
  @discardableResult
  open class func undefinedStatus(_ response: XPlatPaySDK.CheckBindingPaymentResponse) -> XPlatPaySDK.CardBindingServiceError
  @discardableResult
  open class func challengeInvalidRedirectUrl(_ response: XPlatPaySDK.CheckBindingPaymentResponse) -> XPlatPaySDK.CardBindingServiceError
  @discardableResult
  open class func challengeHandlingError(_ response: XPlatPaySDK.CheckBindingPaymentResponse, _ error: Any) -> XPlatPaySDK.CardBindingServiceError
  override public init(_ message: Swift.String)
  override public init(message: Swift.String, inner: Swift.Error?)
  @objc deinit
}
public enum ErrorCodes {
  case amountLimitExceeded
  case amountMismatch
  case cardNetworkNotSupported
  case cardNotFound
  case codeCheckFailed
  case gatewayNotFound
  case insecureMerchantOrigin
  case invalidAmount
  case invalidCountry
  case invalidCurrency
  case invalidVersion
  case merchantNotFound
  case merchantOriginError
  public static func == (a: XPlatPaySDK.ErrorCodes, b: XPlatPaySDK.ErrorCodes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@discardableResult
public func errorCodeFromString(_ value: Swift.String) -> XPlatPaySDK.ErrorCodes!
@discardableResult
public func errorCodeToString(_ value: XPlatPaySDK.ErrorCodes) -> Swift.String
open class IsAuthorizedResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let isAuthorized: Swift.Bool
  public init(_ status: Swift.String, _ code: Swift.Int32, _ isAuthorized: Swift.Bool)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.IsAuthorizedResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
public protocol FileSystemPath {
  var separator: Swift.String { get }
  @discardableResult
  func isAbsolute(_ p: Swift.String) -> Swift.Bool
  @discardableResult
  func normalize(_ p: Swift.String) -> Swift.String
  @discardableResult
  func join(_ paths: XPlatPaySDK.YSArray<Swift.String>) -> Swift.String
  @discardableResult
  func dirname(_ p: Swift.String) -> Swift.String
  @discardableResult
  func basename(_ p: Swift.String) -> Swift.String
  @discardableResult
  func extname(_ p: Swift.String) -> Swift.String
  @discardableResult
  func name(_ p: Swift.String) -> Swift.String
  @discardableResult
  func parse(_ p: Swift.String) -> XPlatPaySDK.ParsedPath
}
open class ParsedPath {
  final public let dir: Swift.String
  final public let base: Swift.String
  final public let ext: Swift.String!
  final public let name: Swift.String
  public init(_ dir: Swift.String, _ base: Swift.String, _ ext: Swift.String!, _ name: Swift.String)
  @objc deinit
}
public typealias SSLPinningResolverCallback = (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void
public protocol SSLPinningResolver {
  func process(challenge: Foundation.URLAuthenticationChallenge, completion: @escaping XPlatPaySDK.SSLPinningResolverCallback)
}
@discardableResult
public func nullIfEmptyString(_ value: Swift.String!) -> Swift.String!
@discardableResult
public func emptyStringIfNull(_ value: Swift.String!) -> Swift.String
@discardableResult
public func isStringNullOrEmpty(_ value: Swift.String!) -> Swift.Bool
@discardableResult
public func quote(_ value: Swift.String) -> Swift.String
@discardableResult
public func stringReplaceAll(_ value: Swift.String, _ substr: Swift.String, _ newSubstr: Swift.String) -> Swift.String
@discardableResult
public func removeNewlines(_ value: Swift.String) -> Swift.String
open class RegisterPushTokenRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let appId: Swift.String
  final public let appVersion: Swift.String
  final public let hardwareId: Swift.String
  final public let pushToken: Swift.String
  final public let pushTokenType: XPlatPaySDK.PushTokenType
  final public let platform: XPlatPaySDK.PlatformType
  final public let deviceName: Swift.String
  final public let zoneId: Swift.String
  final public let installId: Swift.String
  final public let deviceId: Swift.String
  public init(_ appId: Swift.String, _ appVersion: Swift.String, _ hardwareId: Swift.String, _ pushToken: Swift.String, _ pushTokenType: XPlatPaySDK.PushTokenType, _ platform: XPlatPaySDK.PlatformType, _ deviceName: Swift.String, _ zoneId: Swift.String, _ installId: Swift.String, _ deviceId: Swift.String)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @discardableResult
  override open func params() -> XPlatPaySDK.NetworkParams
  override public init()
  @objc deinit
}
final public class YSSet<T> : Swift.Sequence where T : Swift.Hashable {
  public typealias Iterator = Swift.Set<T>.Iterator
  __consuming final public func makeIterator() -> Swift.Set<T>.Iterator
  final public var items: Swift.Set<T>
  final public var size: Swift.Int32 {
    get
  }
  public init()
  public init<K>(_ items: K) where T == K.Element, K : Swift.Sequence
  @discardableResult
  final public func add(_ value: T) -> XPlatPaySDK.YSSet<T>
  final public func has(_ value: T) -> Swift.Bool
  final public func values() -> Swift.AnySequence<T>
  @discardableResult
  final public func delete(_ item: T) -> Swift.Bool
  final public func clear()
  public typealias Element = T
  @objc deinit
}
extension YSSet : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
public func == <T>(lhs: XPlatPaySDK.YSSet<T>, rhs: XPlatPaySDK.YSSet<T>) -> Swift.Bool where T : Swift.Hashable
open class UserCardsResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let cards: XPlatPaySDK.YSArray<XPlatPaySDK.UserCard>
  public init(_ status: Swift.String, _ code: Swift.Int32, _ cards: XPlatPaySDK.YSArray<XPlatPaySDK.UserCard>)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.UserCardsResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
public protocol FileSystemImplementation {
  @discardableResult
  func getItemInfo(_ path: Swift.String) -> XPlatPaySDK.XPromise<XPlatPaySDK.ItemInfo>
  @discardableResult
  func exists(_ path: Swift.String) -> XPlatPaySDK.XPromise<Swift.Bool>
  @discardableResult
  func listDirectory(_ path: Swift.String) -> XPlatPaySDK.XPromise<XPlatPaySDK.YSArray<Swift.String>>
  @discardableResult
  func readAsStringWithParams(_ path: Swift.String, _ parameters: XPlatPaySDK.ReadParameters) -> XPlatPaySDK.XPromise<Swift.String>
  @discardableResult
  func writeAsStringWithParams(_ path: Swift.String, _ contents: Swift.String, _ parameters: XPlatPaySDK.WriteParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  func readArrayBufferWithParams(_ path: Swift.String, _ parameters: XPlatPaySDK.ReadParameters) -> XPlatPaySDK.XPromise<XPlatPaySDK.ArrayBuffer>
  @discardableResult
  func writeArrayBufferWithParams(_ path: Swift.String, _ contents: XPlatPaySDK.ArrayBuffer, _ parameters: XPlatPaySDK.WriteParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  func deleteWithParams(_ path: Swift.String, _ parameters: XPlatPaySDK.DeleteParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  func moveWithParams(_ source: Swift.String, _ destination: Swift.String, _ parameters: XPlatPaySDK.MoveParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  func copyWithParams(_ source: Swift.String, _ destination: Swift.String, _ parameters: XPlatPaySDK.CopyParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  func makeDirectoryWithParams(_ path: Swift.String, _ parameters: XPlatPaySDK.MakeDirectoryParameters) -> XPlatPaySDK.XPromise<Swift.Void>
  @discardableResult
  func hash(_ path: Swift.String, _ algorithm: XPlatPaySDK.HashType) -> XPlatPaySDK.XPromise<Swift.String>
}
open class ReadParameters {
  final public let position: Swift.Int64!
  final public let length: Swift.Int64!
  final public let encoding: XPlatPaySDK.Encoding
  public init(_ position: Swift.Int64!, _ length: Swift.Int64!, _ encoding: XPlatPaySDK.Encoding = Encoding.Utf8)
  @objc deinit
}
open class WriteParameters {
  final public let overwrite: Swift.Bool
  final public let encoding: XPlatPaySDK.Encoding
  public init(_ overwrite: Swift.Bool, _ encoding: XPlatPaySDK.Encoding = Encoding.Utf8)
  @objc deinit
}
open class DeleteParameters {
  final public let ignoreAbsence: Swift.Bool
  public init(_ ignoreAbsence: Swift.Bool)
  @objc deinit
}
open class CopyParameters {
  final public let createIntermediates: Swift.Bool
  public init(_ createIntermediates: Swift.Bool)
  @objc deinit
}
open class MoveParameters {
  final public let createIntermediates: Swift.Bool
  final public let overwrite: Swift.Bool
  public init(_ createIntermediates: Swift.Bool, _ overwrite: Swift.Bool)
  @objc deinit
}
open class MakeDirectoryParameters {
  final public let createIntermediates: Swift.Bool
  public init(_ createIntermediates: Swift.Bool)
  @objc deinit
}
public func delayed<T>(_ result: T, _ afterMs: Swift.Int64) -> XPlatPaySDK.XPromise<T>
public protocol BoundQueueType {
}
public enum OperationsQueue : XPlatPaySDK.BoundQueueType {
}
public enum ResultsQueue : XPlatPaySDK.BoundQueueType {
}
public struct BoundQueue<T> where T : XPlatPaySDK.BoundQueueType {
  public let queue: Dispatch.DispatchQueue
}
public typealias ResultBlock<T> = (@escaping (XPlatPaySDK.Result<T>) -> Swift.Void) -> Swift.Void
public func toPromise<T>(_ callbackQueue: XPlatPaySDK.BoundQueue<XPlatPaySDK.ResultsQueue>, _ block: @escaping XPlatPaySDK.ResultBlock<T>) -> XPlatPaySDK.XPromise<T>
public func asyncify<T>(_ operationsQueue: XPlatPaySDK.BoundQueue<XPlatPaySDK.OperationsQueue>, _ resultsQueue: XPlatPaySDK.BoundQueue<XPlatPaySDK.ResultsQueue>, _ invocation: @escaping (() -> XPlatPaySDK.Result<T>)) -> XPlatPaySDK.XPromise<T>
open class File {
  final public let name: Swift.String
  public init(_ name: Swift.String)
  @objc deinit
}
public typealias NetworkParams = XPlatPaySDK.MapJSONItem
public typealias NetworkUrlExtra = XPlatPaySDK.MapJSONItem
public typealias NetworkHeadersExtra = XPlatPaySDK.MapJSONItem
public enum NetworkMethod : Swift.String {
  case get
  case post
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RequestEncodingKind {
  case url
  case json
  public static func == (a: XPlatPaySDK.RequestEncodingKind, b: XPlatPaySDK.RequestEncodingKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RequestEncoding {
  var kind: XPlatPaySDK.RequestEncodingKind { get }
}
@_hasMissingDesignatedInitializers open class UrlRequestEncoding : XPlatPaySDK.RequestEncoding {
  final public let kind: XPlatPaySDK.RequestEncodingKind
  @objc deinit
}
@_hasMissingDesignatedInitializers open class JsonRequestEncoding : XPlatPaySDK.RequestEncoding {
  final public let kind: XPlatPaySDK.RequestEncodingKind
  @objc deinit
}
public protocol NetworkRequest {
  @discardableResult
  func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  func targetPath() -> Swift.String
  @discardableResult
  func params() -> XPlatPaySDK.NetworkParams
  @discardableResult
  func urlExtra() -> XPlatPaySDK.NetworkUrlExtra
  @discardableResult
  func headersExtra() -> XPlatPaySDK.NetworkHeadersExtra
  @discardableResult
  func encoding() -> XPlatPaySDK.RequestEncoding
}
open class BaseNetworkRequest : XPlatPaySDK.NetworkRequest {
  public init()
  @discardableResult
  open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  open func targetPath() -> Swift.String
  @discardableResult
  open func params() -> XPlatPaySDK.NetworkParams
  @discardableResult
  open func urlExtra() -> XPlatPaySDK.NetworkUrlExtra
  @discardableResult
  open func headersExtra() -> XPlatPaySDK.NetworkHeadersExtra
  @discardableResult
  open func encoding() -> XPlatPaySDK.RequestEncoding
  @objc deinit
}
open class SealedNetworkRequest : XPlatPaySDK.NetworkRequest {
  public init(_ _method: XPlatPaySDK.NetworkMethod, _ _targetPath: Swift.String, _ _params: XPlatPaySDK.MapJSONItem, _ _urlExtra: XPlatPaySDK.MapJSONItem, _ _headersExtra: XPlatPaySDK.NetworkHeadersExtra, _ _encoding: XPlatPaySDK.RequestEncoding)
  @discardableResult
  open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  open func targetPath() -> Swift.String
  @discardableResult
  open func params() -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func urlExtra() -> XPlatPaySDK.MapJSONItem
  @discardableResult
  open func headersExtra() -> XPlatPaySDK.NetworkHeadersExtra
  @discardableResult
  open func encoding() -> XPlatPaySDK.RequestEncoding
  @objc deinit
}
open class CheckBindingPaymentResponse : XPlatPaySDK.DiehardStatus3dsResponse {
  final public let cardId: Swift.String
  final public let rrn: Swift.String!
  final public let redirectUrl: Swift.String!
  public init(_ status: Swift.String, _ statusCode: Swift.String!, _ statusDescription: Swift.String!, _ cardId: Swift.String, _ rrn: Swift.String!, _ redirectUrl: Swift.String!, _ status3ds: Swift.String!)
  @discardableResult
  open class func fromJsonItem(_ item: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.CheckBindingPaymentResponse>
  override public init(_ status: Swift.String, _ statusCode: Swift.String!, _ statusDescription: Swift.String!, _ status3ds: Swift.String!)
  @objc deinit
}
public enum PollingStep : Swift.String {
  case retry
  case done
  public func toString() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
open class PollingError : XPlatPaySDK.YSError {
  override public init(_ message: Swift.String)
  override public init(message: Swift.String, inner: Swift.Error?)
  @objc deinit
}
open class PollingOptions {
  final public let retries: Swift.Int32!
  final public let nextIntervalStrategy: XPlatPaySDK.PollingNextIntervalStrategy!
  final public let timeoutMs: Swift.Int64!
  final public let cancellationToken: XPlatPaySDK.CancellationToken!
  public init(_ retries: Swift.Int32!, _ nextIntervalStrategy: XPlatPaySDK.PollingNextIntervalStrategy!, _ timeoutMs: Swift.Int64!, _ cancellationToken: XPlatPaySDK.CancellationToken!)
  @discardableResult
  open class func indefinite() -> XPlatPaySDK.PollingOptions
  @objc deinit
}
@discardableResult
public func startPolling<T>(_ taskFn: @escaping () -> XPlatPaySDK.XPromise<T>, _ checkResult: @escaping (XPlatPaySDK.Result<T>) -> XPlatPaySDK.Result<XPlatPaySDK.PollingStep>, _ options: XPlatPaySDK.PollingOptions = PollingOptions.indefinite()) -> XPlatPaySDK.XPromise<T>
@discardableResult
public func startSuccessResultPolling<T>(_ taskFn: @escaping () -> XPlatPaySDK.XPromise<T>, _ checkResult: @escaping (T) -> XPlatPaySDK.Result<XPlatPaySDK.PollingStep>, _ options: XPlatPaySDK.PollingOptions = PollingOptions.indefinite()) -> XPlatPaySDK.XPromise<T>
open class CancellationToken {
  public init()
  open func cancel()
  @discardableResult
  open func isCancelled() -> Swift.Bool
  @objc deinit
}
public protocol PollingNextIntervalStrategy {
  @discardableResult
  func getNextIntervalMs(_ count: Swift.Int32) -> Swift.Int64
}
open class PollingFixedIntervalStrategy : XPlatPaySDK.PollingNextIntervalStrategy {
  public init(_ interval: Swift.Int64)
  @discardableResult
  open func getNextIntervalMs(_ count: Swift.Int32) -> Swift.Int64
  @objc deinit
}
open class PollingIncrementalIntervalStrategy : XPlatPaySDK.PollingNextIntervalStrategy {
  public init(_ interval: Swift.Int64)
  @discardableResult
  open func getNextIntervalMs(_ count: Swift.Int32) -> Swift.Int64
  @objc deinit
}
open class PollingFunctor<T> {
  public init(_ taskFn: @escaping () -> XPlatPaySDK.XPromise<T>, _ checkResult: @escaping (XPlatPaySDK.Result<T>) -> XPlatPaySDK.Result<XPlatPaySDK.PollingStep>, _ options: XPlatPaySDK.PollingOptions)
  @discardableResult
  open func poll() -> XPlatPaySDK.XPromise<T>
  @discardableResult
  open func nextStep(_ res: XPlatPaySDK.Result<T>) -> XPlatPaySDK.XPromise<T>
  @objc deinit
}
open class DefaultUidAttachInterceptor : XPlatPaySDK.NetworkInterceptor {
  public init(_ defaultUid: Swift.Int32!)
  @discardableResult
  open func intercept(_ originalRequest: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkRequest>
  @objc deinit
}
open class ValidateRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let merchantOrigin: Swift.String
  final public let paymentSheet: XPlatPaySDK.PaymentSheet
  public init(_ merchantOrigin: Swift.String, _ paymentSheet: XPlatPaySDK.PaymentSheet)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @discardableResult
  override open func params() -> XPlatPaySDK.NetworkParams
  override public init()
  @objc deinit
}
open class SyncUserCardResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let card: XPlatPaySDK.UserCard
  public init(_ status: Swift.String, _ code: Swift.Int32, _ card: XPlatPaySDK.UserCard)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.SyncUserCardResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
public protocol NetworkResponseBody {
  @discardableResult
  func string() -> Swift.String
  @discardableResult
  func bytes() -> XPlatPaySDK.ArrayBuffer
}
public protocol NetworkResponse {
  @discardableResult
  func code() -> Swift.Int32
  @discardableResult
  func headers() -> XPlatPaySDK.YSMap<Swift.String, Swift.String>
  @discardableResult
  func isSuccessful() -> Swift.Bool
  @discardableResult
  func body() -> XPlatPaySDK.NetworkResponseBody!
}
open class PaymentMethod {
  final public let allowedAuthMethods: XPlatPaySDK.YSArray<XPlatPaySDK.AuthMethods>
  final public let type: XPlatPaySDK.PaymentMethodTypes
  final public let gateway: Swift.String
  final public let allowedCardNetworks: XPlatPaySDK.YSArray<XPlatPaySDK.CardNetworks>
  final public let gatewayMerchantId: Swift.String
  public init(_ allowedAuthMethods: XPlatPaySDK.YSArray<XPlatPaySDK.AuthMethods>, _ type: XPlatPaySDK.PaymentMethodTypes, _ gateway: Swift.String, _ allowedCardNetworks: XPlatPaySDK.YSArray<XPlatPaySDK.CardNetworks>, _ gatewayMerchantId: Swift.String)
  @discardableResult
  open func toMapJSONItem() -> XPlatPaySDK.MapJSONItem
  @objc deinit
}
open class GetAllowedBinsResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let bins: XPlatPaySDK.YSArray<Swift.String>
  public init(_ status: Swift.String, _ code: Swift.Int32, _ bins: XPlatPaySDK.YSArray<Swift.String>)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.GetAllowedBinsResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
open class MapAggregatorProvider : XPlatPaySDK.AggregatorProvider {
  public var currentAggregator: XPlatPaySDK.Aggregator!
  public init(_ aggregators: XPlatPaySDK.YSMap<Swift.String, XPlatPaySDK.Aggregator>)
  @discardableResult
  open func getAggregator() -> XPlatPaySDK.Aggregator
  @discardableResult
  open func updateAggregator(_ event: XPlatPaySDK.EventusEvent) -> Swift.Bool
  @objc deinit
}
open class APIError : XPlatPaySDK.YSError {
  final public let status: Swift.String
  final public let code: Swift.Int32
  final public let desc: XPlatPaySDK.ErrorCodes!
  final public let callSite: Swift.String
  public init(_ status: Swift.String, _ code: Swift.Int32, _ desc: XPlatPaySDK.ErrorCodes!, _ callSite: Swift.String, _ message: Swift.String = "Unknown API Error")
  @discardableResult
  open class func isError(_ status: Swift.String, _ code: Swift.Int32) -> Swift.Bool
  override public init(_ message: Swift.String)
  override public init(message: Swift.String, inner: Swift.Error?)
  @objc deinit
}
open class VerifyBindingRequest : XPlatPaySDK.BaseNetworkRequest {
  final public let bindingId: Swift.String
  public init(_ bindingId: Swift.String)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func params() -> XPlatPaySDK.NetworkParams
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  override public init()
  @objc deinit
}
open class YandexPayApi {
  public init(_ network: XPlatPaySDK.Network, _ responseProcessor: XPlatPaySDK.ResponseProcessor)
  @discardableResult
  open func checkout(_ request: XPlatPaySDK.PayCheckoutRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.PayCheckoutResponse>
  @discardableResult
  open func setDefaultCard(_ request: XPlatPaySDK.SetDefaultCardRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.SetDefaultCardResponse>
  @discardableResult
  open func validate(_ request: XPlatPaySDK.ValidateRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.ValidateResponse>
  @discardableResult
  open func userCards(_ request: XPlatPaySDK.UserCardsRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.UserCardsResponse>
  @discardableResult
  open func isReadyToPay(_ request: XPlatPaySDK.IsReadyToPayRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.IsReadyToPayResponse>
  @discardableResult
  open func loadUserProfile(_ request: XPlatPaySDK.UserProfileRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.UserProfileResponse>
  @discardableResult
  open func syncUserCard(_ request: XPlatPaySDK.SyncUserCardRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.SyncUserCardResponse>
  @discardableResult
  open func encryptedAppId(_ request: XPlatPaySDK.EncryptedAppIdRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.EncryptedAppIdResponse>
  @discardableResult
  open func bankLogos(_ request: XPlatPaySDK.BankLogosRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.BankLogosResponse>
  @discardableResult
  open func getAllowedBins(_ request: XPlatPaySDK.GetAllowedBinsRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.GetAllowedBinsResponse>
  @discardableResult
  open func registerPushToken(_ request: XPlatPaySDK.RegisterPushTokenRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.RegisterPushTokenResponse>
  @discardableResult
  open func isAuthorized(_ request: XPlatPaySDK.IsAuthorizedRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.IsAuthorizedResponse>
  @discardableResult
  open func initInstallReward(_ request: XPlatPaySDK.InitInstallRewardRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.InitInstallRewardResponse>
  @discardableResult
  open func getInstallReward(_ request: XPlatPaySDK.GetInstallRewardRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.GetInstallRewardResponse>
  @objc deinit
}
open class EncryptedCardResponse : XPlatPaySDK.BaseNetworkResponse {
  final public let id: Swift.String
  final public let encryptedCard: Swift.String
  public init(_ status: Swift.String, _ code: Swift.Int32, _ id: Swift.String, _ encryptedCard: Swift.String)
  @discardableResult
  open class func fromJSONItem(_ json: XPlatPaySDK.JSONItem) -> XPlatPaySDK.Result<XPlatPaySDK.EncryptedCardResponse>
  override public init(_ status: Swift.String, _ code: Swift.Int32)
  @objc deinit
}
open class Payer {
  final public let oauthToken: Swift.String!
  final public let uid: Swift.String!
  final public let email: Swift.String!
  public init(_ oauthToken: Swift.String!, _ uid: Swift.String!, _ email: Swift.String!)
  @objc deinit
}
open class NetworkServiceError : XPlatPaySDK.ExternalConvertibleError {
  public init(_ kind: XPlatPaySDK.ExternalErrorKind, _ trigger: XPlatPaySDK.ExternalErrorTrigger, _ statusCode: Swift.Int32!, _ message: Swift.String)
  @discardableResult
  open class func transportFailure(_ error: XPlatPaySDK.YSError) -> XPlatPaySDK.NetworkServiceError
  @discardableResult
  open class func badStatusCode(_ statusCode: Swift.Int32, _ message: Swift.String!) -> XPlatPaySDK.NetworkServiceError
  @discardableResult
  open class func noResponseBody() -> XPlatPaySDK.NetworkServiceError
  @discardableResult
  open class func unableToDeserialize(_ error: XPlatPaySDK.YSError) -> XPlatPaySDK.NetworkServiceError
  @discardableResult
  open class func unableToParse(_ item: XPlatPaySDK.JSONItem, _ error: XPlatPaySDK.YSError) -> XPlatPaySDK.NetworkServiceError
  @discardableResult
  open func errorWithTrigger(_ trigger: XPlatPaySDK.ExternalErrorTrigger) -> XPlatPaySDK.NetworkServiceError
  override public init(_ kind: XPlatPaySDK.ExternalErrorKind, _ trigger: XPlatPaySDK.ExternalErrorTrigger, _ code: Swift.Int32!, _ status: Swift.String!, _ message: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class YSDate {
  final public let value: Foundation.Date
  convenience public init(_ string: Swift.String)
  convenience public init(_ int: Swift.Int64)
  convenience public init()
  public static func now() -> Swift.Int64
  public static func convert(date: Foundation.Date) -> Swift.Int64
  final public func getMonth() -> Swift.Int32
  final public func getHours() -> Swift.Int32
  final public func getMinutes() -> Swift.Int32
  final public func getSeconds() -> Swift.Int32
  final public func getDate() -> Swift.Int32
  final public func getFullYear() -> Swift.Int32
  final public func getDateValue() -> Foundation.Date
  final public func getTime() -> Swift.Int64
  @objc deinit
}
extension YSDate : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
open class EncryptedCardRequest : XPlatPaySDK.DiehardRequest {
  final public let id: Swift.String
  final public let cardID: Swift.String
  final public let cvn: Swift.String
  public init(_ id: Swift.String, _ cardID: Swift.String, _ cvn: Swift.String)
  @discardableResult
  override open func method() -> XPlatPaySDK.NetworkMethod
  @discardableResult
  override open func targetPath() -> Swift.String
  @discardableResult
  override open func wrappedParams() -> XPlatPaySDK.NetworkParams
  @discardableResult
  override open func encoding() -> XPlatPaySDK.RequestEncoding
  @discardableResult
  override open func headersExtra() -> XPlatPaySDK.NetworkHeadersExtra
  override public init()
  @objc deinit
}
@objc final public class DefaultNetwork : ObjectiveC.NSObject, XPlatPaySDK.Network, Foundation.URLSessionDelegate {
  convenience public init(baseURL: Foundation.URL, sslPinning: XPlatPaySDK.SSLPinningResolver?, logger: XPlatPaySDK.Logger? = nil)
  public init(baseUrlProvider: @escaping () -> Foundation.URL, sslPinning: XPlatPaySDK.SSLPinningResolver?, logger: XPlatPaySDK.Logger? = nil)
  @discardableResult
  final public func execute(_ request: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.JSONItem>
  @discardableResult
  final public func executeRaw(_ request: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkResponse>
  @discardableResult
  final public func resolveURL(_ request: XPlatPaySDK.NetworkRequest) -> Swift.String!
  @objc final public func urlSession(_: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  final public func runRawRequest(request: XPlatPaySDK.NetworkRequest) -> XPlatPaySDK.XPromise<XPlatPaySDK.NetworkResponse>
  @objc override dynamic public init()
  @objc deinit
}
extension URLRequest {
  public var pmkRequest: Foundation.URLRequest {
    get
  }
}
extension URL {
  public var pmkRequest: Foundation.URLRequest {
    get
  }
}
extension XPlatPaySDK.Encoding : Swift.Equatable {}
extension XPlatPaySDK.Encoding : Swift.Hashable {}
extension XPlatPaySDK.HashType : Swift.Equatable {}
extension XPlatPaySDK.HashType : Swift.Hashable {}
extension XPlatPaySDK.OrderItemTypes : Swift.Equatable {}
extension XPlatPaySDK.OrderItemTypes : Swift.Hashable {}
extension XPlatPaySDK.AttachOpenMethod : Swift.Equatable {}
extension XPlatPaySDK.AttachOpenMethod : Swift.Hashable {}
extension XPlatPaySDK.AttachOpenMethod : Swift.RawRepresentable {}
extension XPlatPaySDK.AuthMethods : Swift.Equatable {}
extension XPlatPaySDK.AuthMethods : Swift.Hashable {}
extension XPlatPaySDK.PaymentMethodTypes : Swift.Equatable {}
extension XPlatPaySDK.PaymentMethodTypes : Swift.Hashable {}
extension XPlatPaySDK.CountryCodes : Swift.Equatable {}
extension XPlatPaySDK.CountryCodes : Swift.Hashable {}
extension XPlatPaySDK.ContactField : Swift.Equatable {}
extension XPlatPaySDK.ContactField : Swift.Hashable {}
extension XPlatPaySDK.ContactField : Swift.RawRepresentable {}
extension XPlatPaySDK.TransportErrorCodes : Swift.Equatable {}
extension XPlatPaySDK.TransportErrorCodes : Swift.Hashable {}
extension XPlatPaySDK.EcomailService : Swift.Equatable {}
extension XPlatPaySDK.EcomailService : Swift.Hashable {}
extension XPlatPaySDK.EcomailService : Swift.RawRepresentable {}
extension XPlatPaySDK.EcomailLayer : Swift.Equatable {}
extension XPlatPaySDK.EcomailLayer : Swift.Hashable {}
extension XPlatPaySDK.EcomailLayer : Swift.RawRepresentable {}
extension XPlatPaySDK.JSONItemKind : Swift.Equatable {}
extension XPlatPaySDK.JSONItemKind : Swift.Hashable {}
extension XPlatPaySDK.CardNetworks : Swift.Equatable {}
extension XPlatPaySDK.CardNetworks : Swift.Hashable {}
extension XPlatPaySDK.BankName : Swift.Equatable {}
extension XPlatPaySDK.BankName : Swift.Hashable {}
extension XPlatPaySDK.BankName : Swift.RawRepresentable {}
extension XPlatPaySDK.ExternalErrorTrigger : Swift.Equatable {}
extension XPlatPaySDK.ExternalErrorTrigger : Swift.Hashable {}
extension XPlatPaySDK.ExternalErrorKind : Swift.Equatable {}
extension XPlatPaySDK.ExternalErrorKind : Swift.Hashable {}
extension XPlatPaySDK.FilterRulesService : Swift.Equatable {}
extension XPlatPaySDK.FilterRulesService : Swift.Hashable {}
extension XPlatPaySDK.FilterRulesService : Swift.RawRepresentable {}
extension XPlatPaySDK.FilterRulesClickEvent : Swift.Equatable {}
extension XPlatPaySDK.FilterRulesClickEvent : Swift.Hashable {}
extension XPlatPaySDK.FilterRulesClickEvent : Swift.RawRepresentable {}
extension XPlatPaySDK.FilterRulesEditEvent : Swift.Equatable {}
extension XPlatPaySDK.FilterRulesEditEvent : Swift.Hashable {}
extension XPlatPaySDK.FilterRulesEditEvent : Swift.RawRepresentable {}
extension XPlatPaySDK.FilterRulesEditToggleEvent : Swift.Equatable {}
extension XPlatPaySDK.FilterRulesEditToggleEvent : Swift.Hashable {}
extension XPlatPaySDK.FilterRulesEditToggleEvent : Swift.RawRepresentable {}
extension XPlatPaySDK.FilterRulesStatus : Swift.Equatable {}
extension XPlatPaySDK.FilterRulesStatus : Swift.Hashable {}
extension XPlatPaySDK.FilterRulesStatus : Swift.RawRepresentable {}
extension XPlatPaySDK.CurrencyCodes : Swift.Equatable {}
extension XPlatPaySDK.CurrencyCodes : Swift.Hashable {}
extension XPlatPaySDK.LogEventType : Swift.Equatable {}
extension XPlatPaySDK.LogEventType : Swift.Hashable {}
extension XPlatPaySDK.PushTokenType : Swift.Equatable {}
extension XPlatPaySDK.PushTokenType : Swift.Hashable {}
extension XPlatPaySDK.PlatformType : Swift.Equatable {}
extension XPlatPaySDK.PlatformType : Swift.Hashable {}
extension XPlatPaySDK.PlatformType : Swift.RawRepresentable {}
extension XPlatPaySDK.ClientPlatform : Swift.Equatable {}
extension XPlatPaySDK.ClientPlatform : Swift.Hashable {}
extension XPlatPaySDK.ClientPlatform : Swift.RawRepresentable {}
extension XPlatPaySDK.ExclusiveEmailService : Swift.Equatable {}
extension XPlatPaySDK.ExclusiveEmailService : Swift.Hashable {}
extension XPlatPaySDK.ExclusiveEmailService : Swift.RawRepresentable {}
extension XPlatPaySDK.ExclusiveEmailClickEvent : Swift.Equatable {}
extension XPlatPaySDK.ExclusiveEmailClickEvent : Swift.Hashable {}
extension XPlatPaySDK.ExclusiveEmailClickEvent : Swift.RawRepresentable {}
extension XPlatPaySDK.ExclusiveEmailStatus : Swift.Equatable {}
extension XPlatPaySDK.ExclusiveEmailStatus : Swift.Hashable {}
extension XPlatPaySDK.ExclusiveEmailStatus : Swift.RawRepresentable {}
extension XPlatPaySDK.CardBindingServiceErrorCode : Swift.Equatable {}
extension XPlatPaySDK.CardBindingServiceErrorCode : Swift.Hashable {}
extension XPlatPaySDK.ErrorCodes : Swift.Equatable {}
extension XPlatPaySDK.ErrorCodes : Swift.Hashable {}
extension XPlatPaySDK.NetworkMethod : Swift.Equatable {}
extension XPlatPaySDK.NetworkMethod : Swift.Hashable {}
extension XPlatPaySDK.NetworkMethod : Swift.RawRepresentable {}
extension XPlatPaySDK.RequestEncodingKind : Swift.Equatable {}
extension XPlatPaySDK.RequestEncodingKind : Swift.Hashable {}
extension XPlatPaySDK.PollingStep : Swift.Equatable {}
extension XPlatPaySDK.PollingStep : Swift.Hashable {}
extension XPlatPaySDK.PollingStep : Swift.RawRepresentable {}
